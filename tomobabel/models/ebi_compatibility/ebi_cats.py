# flake8: noqa
from typing import Dict, Sequence, Union

DEPOBJ_CATS: Dict[str, Dict[str, Dict[str, Union[str, Sequence[str]]]]] = {
    "atom_site": {
        "aniso_B[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[1][1]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[1][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[1][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[2][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[2][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[3][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_ratio": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_U[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_U[1][1]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_U[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_U[1][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_U[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_U[1][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_U[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_U[2][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_U[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_U[2][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_U[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_U[3][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "attached_hydrogens": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "B_equiv_geom_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_equiv_geom_mean_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_iso_or_equiv": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_iso_or_equiv_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "calc_attached_atom": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "calc_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["d", "calc", "c", "dum"],
        },
        "Cartn_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_x_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_y_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_z_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chemical_conn_number": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "constraints": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "disorder_assembly": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "disorder_group": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "footnote_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "fract_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_x_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_y_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_z_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "group_PDB": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["ATOM", "HETATM"],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "occupancy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "restraints": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "symmetry_multiplicity": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "thermal_displace_type": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Uani", "Uiso", "Uovl", "Umpe", "Bani", "Biso", "Bovl"],
        },
        "type_symbol": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "U_equiv_geom_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U_equiv_geom_mean_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U_iso_or_equiv": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U_iso_or_equiv_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Wyckoff_symbol": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_atom_ambiguity": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "adp_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Uani", "Uiso", "Uovl", "Umpe", "Bani", "Biso", "Bovl"],
        },
        "refinement_flags": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["S", "G", "R", "D", "T", "U", "P"],
        },
        "refinement_flags_adp": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["T", "U", "TU"],
        },
        "refinement_flags_occupancy": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "refinement_flags_posn": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "D",
                "G",
                "R",
                "S",
                "DG",
                "DR",
                "DS",
                "GR",
                "GS",
                "RS",
                "DGR",
                "DGS",
                "DRS",
                "GRS",
                "DGRS",
            ],
        },
        "pdbx_auth_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_model_num": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_PDB_residue_no": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_residue_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_strand_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_atom_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_atom_name": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_formal_charge": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_tls_group_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ncs_dom_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_struct_group_id": {
            "data_type": "ucode-alphanum-csv",
            "regex": "[A-Za-z0-9]+(,[A-Za-z0-9]+)?",
            "options": [],
        },
        "pdbx_group_NDB": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_atom_group": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_label_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_not_in_asym": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_label_index": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_sifts_xref_db_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_sifts_xref_db_acc": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_sifts_xref_db_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_sifts_xref_db_res": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "atom_site_anisotrop": {
        "B[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B[1][1]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B[1][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B[1][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B[2][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B[2][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B[3][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ratio": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type_symbol": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "U[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U[1][1]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U[1][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U[1][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U[2][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U[2][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U[3][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_label_seq_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_model_num": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_not_in_asym": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_residue_no": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_residue_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_strand_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_atom_name": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_auth_atom_name": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_label_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "atom_sites": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "Cartn_transf_matrix[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_transf_matrix[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_transf_matrix[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_transf_matrix[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_transf_matrix[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_transf_matrix[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_transf_matrix[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_transf_matrix[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_transf_matrix[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_transf_vector[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_transf_vector[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_transf_vector[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_transform_axes": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "fract_transf_matrix[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_transf_matrix[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_transf_matrix[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_transf_matrix[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_transf_matrix[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_transf_matrix[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_transf_matrix[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_transf_matrix[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_transf_matrix[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_transf_vector[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_transf_vector[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_transf_vector[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "solution_primary": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "difmap",
                "vecmap",
                "heavy",
                "direct",
                "geom",
                "disper",
                "isomor",
            ],
        },
        "solution_secondary": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "difmap",
                "vecmap",
                "heavy",
                "direct",
                "geom",
                "disper",
                "isomor",
            ],
        },
        "solution_hydrogens": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "difmap",
                "vecmap",
                "heavy",
                "direct",
                "geom",
                "disper",
                "isomor",
            ],
        },
        "special_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "atom_sites_alt": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        }
    },
    "atom_sites_alt_ens": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        }
    },
    "atom_sites_alt_gen": {
        "alt_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ens_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "atom_sites_footnote": {
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        }
    },
    "atom_type": {
        "analytical_mass_percent": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number_in_cell": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "oxidation_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "radius_bond": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "radius_contact": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scat_Cromer_Mann_a1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scat_Cromer_Mann_a2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scat_Cromer_Mann_a3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scat_Cromer_Mann_a4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scat_Cromer_Mann_b1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scat_Cromer_Mann_b2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scat_Cromer_Mann_b3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scat_Cromer_Mann_b4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scat_Cromer_Mann_c": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scat_dispersion_imag": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scat_dispersion_real": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scat_length_neutron": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "scat_source": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "scat_versus_stol_list": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "scat_dispersion_source": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_scat_Cromer_Mann_a5": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_scat_Cromer_Mann_b5": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_scat_Cromer_Mann_a6": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_scat_Cromer_Mann_b6": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_scat_Z": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_N_electrons": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "audit": {
        "creation_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "creation_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "revision_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "update_record": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "audit_author": {
        "address": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "identifier_ORCID": {
            "data_type": "orcid_id",
            "regex": "[0-9]{4}-[0-9]{4}-[0-9]{4}-([0-9]{3}X|[0-9]{4})",
            "options": [],
        },
    },
    "audit_conform": {
        "dict_location": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dict_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dict_version": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "audit_contact_author": {
        "address": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "email": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "fax": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "phone": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "cell": {
        "angle_alpha": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_alpha_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_beta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_beta_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_gamma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_gamma_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "formula_units_Z": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "length_a": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_a_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_b": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_b_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_c": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_c_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "volume": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "volume_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Z_PDB": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reciprocal_angle_alpha": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reciprocal_angle_beta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reciprocal_angle_gamma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reciprocal_angle_alpha_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reciprocal_angle_beta_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reciprocal_angle_gamma_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reciprocal_length_a": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reciprocal_length_b": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reciprocal_length_c": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reciprocal_length_a_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reciprocal_length_b_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reciprocal_length_c_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_unique_axis": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_esd_method": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "single crystal",
                "window",
                "scan varying",
                "propagated",
                "population",
                "refined",
            ],
        },
    },
    "cell_measurement": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pressure": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pressure_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "radiation": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "reflns_used": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "temp": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temp_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "theta_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "theta_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wavelength": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "cell_measurement_refln": {
        "index_h": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_k": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_l": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "theta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "chem_comp": {
        "formula": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "formula_weight": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "model_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "model_erf": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "model_source": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "mon_nstd_class": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "mon_nstd_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "mon_nstd_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "mon_nstd_parent": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "mon_nstd_parent_comp_id": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number_atoms_all": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number_atoms_nh": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "one_letter_code": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "three_letter_code": {
            "data_type": "uchar5",
            "regex": "[+]?[A-Za-z0-9][A-Za-z0-9]?[A-Za-z0-9]?[A-Za-z0-9]?[A-Za-z0-9]?",
            "options": [],
        },
        "pdbx_synonyms": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_modification_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_component_no": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ambiguous_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_replaced_by": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_replaces": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_formal_charge": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_subcomponent_list": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_model_coordinates_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_model_coordinates_db_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ideal_coordinates_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ideal_coordinates_missing_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "pdbx_model_coordinates_missing_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "pdbx_initial_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "pdbx_modified_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "pdbx_release_status": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["REL", "HOLD", "HPUB", "OBS", "DEL", "REF_ONLY"],
        },
        "pdbx_processing_site": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["PDBE", "EBI", "PDBJ", "PDBC", "RCSB"],
        },
        "pdbx_number_subcomponents": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_class_1": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_class_2": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_comp_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "solvent",
                "organic ligand",
                "inorganic ligand",
                "organometalic ligand",
                "metal cation",
            ],
        },
        "pdbx_reserved_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_status": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_type_modified": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_casnum": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_smiles": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_nscnum": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_pcm": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
    },
    "chem_comp_angle": {
        "atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_3": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "value_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_angle_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_dist_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "chem_comp_atom": {
        "alt_atom_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "charge": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_Cartn_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "model_Cartn_x_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "model_Cartn_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "model_Cartn_y_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "model_Cartn_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "model_Cartn_z_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "partial_charge": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "substruct_code": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["main", "side", "base", "phos", "sugar", "none"],
        },
        "type_symbol": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_align": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_component_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_component_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_alt_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_alt_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_model_Cartn_x_ideal": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_model_Cartn_y_ideal": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_model_Cartn_z_ideal": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_stereo_config": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["R", "S", "N"],
        },
        "pdbx_aromatic_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "pdbx_leaving_atom_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "pdbx_residue_numbering": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_polymer_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["polymer", "non-polymer"],
        },
        "pdbx_ref_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_component_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_component_entity_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_stnd_atom_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_backbone_atom_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "pdbx_n_terminal_atom_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "pdbx_c_terminal_atom_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
    },
    "chem_comp_bond": {
        "atom_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "value_order": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sing", "doub", "trip", "quad", "arom", "poly", "delo", "pi"],
        },
        "value_dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_dist_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_stereo_config": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["E", "Z", "N"],
        },
        "pdbx_aromatic_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
    },
    "chem_comp_chir": {
        "atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_config": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["R", "S"],
        },
        "comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number_atoms_all": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number_atoms_nh": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "volume_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sign", "nosign"],
        },
        "volume_three": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "volume_three_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "chem_comp_chir_atom": {
        "atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "chir_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dev": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "chem_comp_link": {
        "link_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type_comp_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type_comp_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "chem_comp_plane": {
        "comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number_atoms_all": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number_atoms_nh": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "chem_comp_plane_atom": {
        "atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "plane_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "dist_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "chem_comp_tor": {
        "atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_3": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_4": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "chem_comp_tor_value": {
        "comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "tor_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dist_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "chem_link": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        }
    },
    "chem_link_angle": {
        "atom_1_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2"],
        },
        "atom_2_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2"],
        },
        "atom_3_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2"],
        },
        "atom_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "link_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "value_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_angle_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_dist_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "chem_link_bond": {
        "atom_1_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2"],
        },
        "atom_2_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2"],
        },
        "atom_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "link_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "value_dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_dist_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_order": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sing", "doub", "trip", "quad", "arom", "poly", "delo", "pi"],
        },
    },
    "chem_link_chir": {
        "atom_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2"],
        },
        "atom_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_config": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["R", "S"],
        },
        "link_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number_atoms_all": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number_atoms_nh": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "volume_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sign", "nosign"],
        },
        "volume_three": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "volume_three_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "chem_link_chir_atom": {
        "atom_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2"],
        },
        "atom_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "chir_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dev": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "chem_link_plane": {
        "link_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number_atoms_all": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number_atoms_nh": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "chem_link_plane_atom": {
        "atom_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2"],
        },
        "atom_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "plane_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "chem_link_tor": {
        "atom_1_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2"],
        },
        "atom_2_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2"],
        },
        "atom_3_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2"],
        },
        "atom_4_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2"],
        },
        "atom_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id_4": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "link_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "chem_link_tor_value": {
        "tor_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dist_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "chemical": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "compound_source": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "melting_point": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "name_common": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name_mineral": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name_structure_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name_systematic": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "absolute_configuration": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["rm", "ad", "rmad", "syn", "unk"],
        },
        "melting_point_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "melting_point_lt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "optical_rotation": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "properties_biological": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "properties_physical": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "temperature_decomposition": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temperature_decomposition_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temperature_decomposition_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temperature_decomposition_lt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temperature_sublimation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temperature_sublimation_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temperature_sublimation_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temperature_sublimation_lt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "chemical_conn_atom": {
        "charge": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "display_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "display_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "NCA": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "NH": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "type_symbol": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "chemical_conn_bond": {
        "atom_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sing", "doub", "trip", "quad", "arom", "poly", "delo", "pi"],
        },
    },
    "chemical_formula": {
        "analytical": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "iupac": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "moiety": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "structural": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sum": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "weight": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "weight_meas": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "citation": {
        "abstract": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "abstract_id_CAS": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "book_id_ISBN": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "book_publisher": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "book_publisher_city": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "book_title": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "coordinate_linkage": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "country": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "database_id_Medline": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "journal_abbrev": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "journal_id_ASTM": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "journal_id_CSD": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "journal_id_ISSN": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "journal_full": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "journal_issue": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "journal_volume": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "language": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "page_first": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "page_last": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "title": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "year": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "database_id_CSD": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_database_id_DOI": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_database_id_PubMed": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_database_id_patent": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "unpublished_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
    },
    "citation_author": {
        "citation_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "identifier_ORCID": {
            "data_type": "orcid_id",
            "regex": "[0-9]{4}-[0-9]{4}-[0-9]{4}-([0-9]{3}X|[0-9]{4})",
            "options": [],
        },
    },
    "citation_editor": {
        "citation_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "computing": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "cell_refinement": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "data_collection": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "data_reduction": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "molecular_graphics": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "publication_material": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "structure_refinement": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "structure_solution": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_structure_refinement_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_data_reduction_ii": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_data_reduction_ds": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "database": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "journal_ASTM": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "journal_CSD": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "CSD_history": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "code_CAS": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "code_CSD": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "code_ICSD": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "code_MDF": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "code_NBS": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "code_PDB": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "code_PDF": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "code_depnum_ccdc_fiz": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "code_depnum_ccdc_journal": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "code_depnum_ccdc_archive": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_code_NDB": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_code_PDB": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_related_codes_PDB": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "database_2": {
        "database_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "AlphaFoldDB",
                "EMDB",
                "ModelArchive",
                "MODBASE",
                "NDB",
                "PDB",
                "PDB-Dev",
                "RCSB",
                "SWISS-MODEL_REPOSITORY",
                "EBI",
                "PDBE",
                "BMRB",
                "WWPDB",
                "PDB_ACC",
            ],
        },
        "database_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_database_accession": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_DOI": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "database_PDB_caveat": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "database_PDB_matrix": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "origx[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origx[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origx[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origx[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origx[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origx[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origx[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origx[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origx[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origx_vector[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origx_vector[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origx_vector[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale_vector[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale_vector[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale_vector[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "database_PDB_remark": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "database_PDB_rev": {
        "author_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_original": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "mod_type": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": ["0", "1", "2", "3", "4", "5"],
        },
        "replaced_by": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "replaces": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "status": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["in preparation", "prerelease", "full release", "obsolete"],
        },
        "pdbx_record_revised_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_record_revised_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_record_revised_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_record_revised_4": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "database_PDB_rev_record": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "rev_num": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "database_PDB_tvect": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "vector[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "diffrn": {
        "ambient_environment": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ambient_temp": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ambient_temp_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ambient_temp_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crystal_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "crystal_support": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "crystal_treatment": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ambient_pressure": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ambient_pressure_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ambient_pressure_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ambient_pressure_lt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ambient_temp_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ambient_temp_lt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_serial_crystal_experiment": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["Y", "N"],
        },
    },
    "diffrn_attenuator": {
        "code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "scale": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "material": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "diffrn_detector": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "detector": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "diffrn_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "area_resol_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dtime": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_frames_total": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_collection_time_total": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_collection_date": {
            "data_type": "yyyy-mm-dd:hh:mm-flex",
            "regex": "[0-9][0-9][0-9][0-9](-[0-9]?[0-9])?(-[0-9][0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "pdbx_frequency": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number_of_axes": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "diffrn_measurement": {
        "diffrn_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "device": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "device_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "device_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "specimen_support": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
    },
    "diffrn_orient_matrix": {
        "diffrn_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "UB[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "UB[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "UB[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "UB[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "UB[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "UB[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "UB[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "UB[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "UB[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "diffrn_orient_refln": {
        "angle_chi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_kappa": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_omega": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_phi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_psi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_theta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "diffrn_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "index_h": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_k": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_l": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "diffrn_radiation": {
        "collimation": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "diffrn_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "filter_edge": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "inhomogeneity": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "monochromator": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "polarisn_norm": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "polarisn_ratio": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "probe": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["x-ray", "neutron", "electron", "gamma"],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "xray_symbol": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["K-L~3~", "K-L~2~", "K-M~3~", "K-L~2,3~"],
        },
        "wavelength_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_monochromatic_or_laue_m_l": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["M", "L"],
        },
        "pdbx_wavelength_list": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_wavelength": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_diffrn_protocol": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_analyzer": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_scattering_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["x-ray", "neutron", "electron"],
        },
    },
    "diffrn_radiation_wavelength": {
        "wavelength": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "diffrn_refln": {
        "angle_chi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_kappa": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_omega": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_phi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_psi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_theta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "attenuator_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "counts_bg_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "counts_bg_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "counts_net": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "counts_peak": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "counts_total": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "detect_slit_horiz": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "detect_slit_vert": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "diffrn_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "elapsed_time": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "index_h": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_k": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_l": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "intensity_net": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "intensity_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale_group_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "scan_mode": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["om", "ot", "q"],
        },
        "scan_mode_backgd": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["st", "mo"],
        },
        "scan_rate": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scan_time_backgd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scan_width": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "sint_over_lambda": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "standard_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "wavelength": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wavelength_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_image_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_scan_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "class_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "intensity_u": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_detector_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_detector_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_rotation_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_scale_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "frame_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_batch_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_detector_obs_fast": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_detector_obs_slow": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_detector_calc_fast": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_detector_calc_slow": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_panel_mapping_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "diffrn_reflns": {
        "av_R_equivalents": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "av_sigmaI_over_netI": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "diffrn_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "limit_h_max": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "limit_h_min": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "limit_k_max": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "limit_k_min": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "limit_l_max": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "limit_l_min": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reduction_process": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "theta_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "theta_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "transf_matrix[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "transf_matrix[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "transf_matrix[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "transf_matrix[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "transf_matrix[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "transf_matrix[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "transf_matrix[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "transf_matrix[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "transf_matrix[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "av_unetI/netI": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_percent_possible_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rmerge_I_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rsym_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_chi_squared": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_redundancy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_rejects": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_observed_criterion": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_number_obs": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "diffrn_scale_group": {
        "code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "I_net": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "diffrn_source": {
        "current": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "diffrn_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "power": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "size": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "source": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "target": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "H",
                "He",
                "Li",
                "Be",
                "B",
                "C",
                "N",
                "O",
                "F",
                "Ne",
                "Na",
                "Mg",
                "Al",
                "Si",
                "P",
                "S",
                "Cl",
                "Ar",
                "K",
                "Ca",
                "Sc",
                "Ti",
                "V",
                "Cr",
                "Mn",
                "Fe",
                "Co",
                "Ni",
                "Cu",
                "Zn",
                "Ga",
                "Ge",
                "As",
                "Se",
                "Br",
                "Kr",
                "Rb",
                "Sr",
                "Y",
                "Zr",
                "Nb",
                "Mo",
                "Tc",
                "Ru",
                "Rh",
                "Pd",
                "Ag",
                "Cd",
                "In",
                "Sn",
                "Sb",
                "Te",
                "I",
                "Xe",
                "Cs",
                "Ba",
                "La",
                "Ce",
                "Pr",
                "Nd",
                "Pm",
                "Sm",
                "Eu",
                "Gd",
                "Tb",
                "Dy",
                "Ho",
                "Er",
                "Tm",
                "Yb",
                "Lu",
                "Hf",
                "Ta",
                "W",
                "Re",
                "Os",
                "Ir",
                "Pt",
                "Au",
                "Hg",
                "Tl",
                "Pb",
                "Bi",
                "Po",
                "At",
                "Rn",
                "Fr",
                "Ra",
                "Ac",
                "Th",
                "Pa",
                "U",
                "Np",
                "Pu",
                "Am",
                "Cm",
                "Bk",
                "Cf",
                "Es",
                "Fm",
                "Md",
                "No",
                "Lr",
            ],
        },
        "type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "voltage": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "take-off_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_wavelength_list": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_wavelength": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_synchrotron_beamline": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_synchrotron_site": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_synchrotron_y_n": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_source_specific_beamline": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "diffrn_standard_refln": {
        "diffrn_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "index_h": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_k": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_l": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "diffrn_standards": {
        "diffrn_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "decay_%": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "interval_count": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "interval_time": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "scale_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale_u": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "entity": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "formula_weight": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "src_method": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["nat", "man", "syn"],
        },
        "type": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["polymer", "non-polymer", "macrolide", "water", "branched"],
        },
        "pdbx_description": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_number_of_molecules": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_parent_entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_mutation": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_fragment": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ec": {
            "data_type": "ec-type",
            "regex": "([1-7]((.[1-9][0-9]?)|(.-))((.[1-9][0-9]?)|(.-))((.[1-9][0-9]?[0-9]?)|(.-)))(([ ]*,[ ]*)([1-7]((.[1-9][0-9]?)|(.-))((.[1-9][0-9]?)|(.-))((.[1-9][0-9]?[0-9]?)|(.-))))*",
            "options": [],
        },
        "pdbx_modification": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_formula_weight_exptl": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_formula_weight_exptl_method": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_target_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_entities_per_biological_unit": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "entity_keywords": {
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_mutation": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_fragment": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ec": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_antibody_isotype": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "entity_link": {
        "link_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_seq_num_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_seq_num_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "entity_name_com": {
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_provenance": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["UNIPROT", "AUTHOR"],
        },
    },
    "entity_name_sys": {
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "system": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "entity_poly": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "nstd_chirality": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "nstd_linkage": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "nstd_monomer": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "number_of_monomers": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "polypeptide(D)",
                "polypeptide(L)",
                "polydeoxyribonucleotide",
                "polyribonucleotide",
                "polydeoxyribonucleotide/polyribonucleotide hybrid",
                "cyclic-pseudo-peptide",
                "peptide nucleic acid",
                "other",
            ],
        },
        "type_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_strand_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_seq_one_letter_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_seq_one_letter_code_can": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_target_identifier": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_seq_one_letter_code_sample": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_explicit_linking_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "pdbx_sequence_evidence_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["depositor provided", "derived from coordinates"],
        },
        "pdbx_build_self_reference": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "pdbx_N_terminal_seq_one_letter_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_C_terminal_seq_one_letter_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_seq_three_letter_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_seq_db_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["EMBL", "GB", "PIR", "SWS", "UNP"],
        },
        "pdbx_seq_db_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_seq_align_begin": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_seq_align_end": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "entity_poly_seq": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "hetero": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "mon_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "entity_src_gen": {
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "gene_src_common_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "gene_src_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "gene_src_genus": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "gene_src_species": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "gene_src_strain": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "gene_src_tissue": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "gene_src_tissue_fraction": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_genus": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_species": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_gene_src_fragment": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_gene_src_gene": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_gene_src_scientific_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_gene_src_variant": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_gene_src_cell_line": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_gene_src_atcc": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_gene_src_organ": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_gene_src_organelle": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_gene_src_plasmid": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_gene_src_plasmid_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_gene_src_cell": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_gene_src_cellular_location": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_gene": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_organ": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_organelle": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_cellular_location": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_strain": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_tissue_fraction": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_common_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_strain": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "plasmid_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "plasmid_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_variant": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_cell_line": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_atcc": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_culture_collection": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_cell": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_scientific_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_tissue": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_vector": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_vector_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "expression_system_id": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "gene_src_dev_stage": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "start_construct_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_gene_src_ncbi_taxonomy_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_host_org_ncbi_taxonomy_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_src_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_alt_source_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sample", "model"],
        },
        "pdbx_seq_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "N-terminal tag",
                "C-terminal tag",
                "Biological sequence",
                "Linker",
            ],
        },
        "pdbx_beg_seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_end_seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_gene_src_culture_collection": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "entity_src_nat": {
        "common_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "genus": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "species": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "strain": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "tissue": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "tissue_fraction": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_organism_scientific": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_secretion": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_fragment": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_variant": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_cell_line": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_atcc": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_cellular_location": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_organ": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_organelle": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_cell": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_plasmid_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_plasmid_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ncbi_taxonomy_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_src_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_alt_source_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sample", "model"],
        },
        "pdbx_beg_seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_end_seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_culture_collection": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "entry_link": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "exptl": {
        "absorpt_coefficient_mu": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "absorpt_correction_T_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "absorpt_correction_T_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "absorpt_correction_type": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "analytical",
                "cylinder",
                "empirical",
                "gaussian",
                "integration",
                "multi-scan",
                "none",
                "numerical",
                "psi-scan",
                "refdelf",
                "sphere",
            ],
        },
        "absorpt_process_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "crystals_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "method": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "X-RAY DIFFRACTION",
                "NEUTRON DIFFRACTION",
                "FIBER DIFFRACTION",
                "ELECTRON CRYSTALLOGRAPHY",
                "ELECTRON MICROSCOPY",
                "SOLUTION NMR",
                "SOLID-STATE NMR",
                "SOLUTION SCATTERING",
                "POWDER DIFFRACTION",
                "INFRARED SPECTROSCOPY",
                "EPR",
                "FLUORESCENCE TRANSFER",
                "THEORETICAL MODEL",
            ],
        },
        "method_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "exptl_crystal": {
        "colour": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "density_diffrn": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_Matthews": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "density_percent_sol": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "F_000": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "preparation": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "size_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "size_mid": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "size_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "size_rad": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "colour_lustre": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["metallic", "dull", "clear"],
        },
        "colour_modifier": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "light",
                "dark",
                "whitish",
                "blackish",
                "grayish",
                "brownish",
                "reddish",
                "pinkish",
                "orangish",
                "yellowish",
                "greenish",
                "bluish",
            ],
        },
        "colour_primary": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "colourless",
                "white",
                "black",
                "gray",
                "brown",
                "red",
                "pink",
                "orange",
                "yellow",
                "green",
                "blue",
                "violet",
            ],
        },
        "density_meas": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_meas_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_meas_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_meas_lt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_meas_temp": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_meas_temp_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_meas_temp_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_meas_temp_lt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_crystal_image_url": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_crystal_image_format": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_mosaicity": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_mosaicity_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_crystal_image": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "pdbx_x-ray_image": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "pdbx_x-ray_image_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_crystal_diffrn_limit": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_crystal_diffrn_lifetime": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_crystal_direction_1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_crystal_direction_2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_crystal_direction_3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_mosaic_method": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_mosaic_block_size": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_mosaic_block_size_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "exptl_crystal_face": {
        "crystal_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "diffr_chi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "diffr_kappa": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "diffr_phi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "diffr_psi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "index_h": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_k": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_l": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "perp_dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "exptl_crystal_grow": {
        "apparatus": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atmosphere": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "crystal_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "method_ref": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pH": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pressure": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pressure_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "seeding": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "seeding_ref": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "temp_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "temp_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "time": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_pH_range": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "temp": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "exptl_crystal_grow_comp": {
        "conc": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "crystal_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sol_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "volume": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_conc_final": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_bath": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_salt": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_soak_salt": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_soak_solv": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_solv": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "geom": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "geom_angle": {
        "atom_site_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "publ_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "site_symmetry_1": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_2": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_3": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_atom_site_PDB_ins_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_atom_site_PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_atom_site_PDB_ins_code_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_model_num": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "geom_bond": {
        "atom_site_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dist_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "publ_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "site_symmetry_1": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_2": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "valence": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_atom_site_PDB_ins_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_atom_site_PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_model_num": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "geom_contact": {
        "atom_site_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dist_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "publ_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "site_symmetry_1": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_2": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "pdbx_atom_site_PDB_ins_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_atom_site_PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_model_num": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "geom_hbond": {
        "angle_DHA": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_DHA_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "atom_site_id_A": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_A": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_A": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_A": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_A": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_A": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_id_D": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_D": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_D": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_D": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_D": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_D": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_id_H": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_H": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_H": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_H": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_H": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_H": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_A": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_A": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_A": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_A": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_D": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_D": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_D": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_D": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_H": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_H": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_H": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_H": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dist_DA": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dist_DA_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dist_DH": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dist_DH_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dist_HA": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dist_HA_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "publ_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "site_symmetry_A": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_D": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_H": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
    },
    "geom_torsion": {
        "atom_site_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_id_4": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_alt_id_4": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_atom_id_4": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_4": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_seq_id_4": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_asym_id_4": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_4": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_4": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_4": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_4": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "publ_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "site_symmetry_1": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_2": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_3": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_4": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_atom_site_PDB_ins_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_atom_site_PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_atom_site_PDB_ins_code_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_atom_site_PDB_ins_code_4": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_model_num": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "journal": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "coden_ASTM": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "coden_Cambridge": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "coeditor_address": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "coeditor_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "coeditor_email": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "coeditor_fax": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "coeditor_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "coeditor_notes": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "coeditor_phone": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "data_validation_number": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "date_accepted": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_from_coeditor": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_to_coeditor": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_printers_final": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_printers_first": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_proofs_in": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_proofs_out": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_recd_copyright": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_recd_electronic": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_recd_hard_copy": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "issue": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "language": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name_full": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "page_first": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "page_last": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "paper_category": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "suppl_publ_number": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "suppl_publ_pages": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "techeditor_address": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "techeditor_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "techeditor_email": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "techeditor_fax": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "techeditor_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "techeditor_notes": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "techeditor_phone": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "volume": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "year": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "journal_index": {
        "subterm": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "term": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "phasing": {
        "method": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        }
    },
    "phasing_averaging": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "phasing_isomorphous": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "parent": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "phasing_MAD": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_reflns_acentric": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_reflns_centric": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_reflns": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_fom_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_fom_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_fom": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_cullis_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_cullis_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_cullis": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_kraut_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_kraut_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_kraut": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_loc_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_loc_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_loc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_power_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_power_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_power": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_number_data_sets": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_anom_scat_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "phasing_MAD_clust": {
        "expt_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number_set": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "phasing_MAD_expt": {
        "delta_delta_phi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "delta_phi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "delta_phi_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_fom": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number_clust": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "R_normal_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_normal_anom_scat": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "phasing_MAD_ratio": {
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "expt_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "clust_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ratio_one_wl": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ratio_one_wl_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ratio_two_wl": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wavelength_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "wavelength_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "phasing_MAD_set": {
        "clust_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "expt_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "f_double_prime": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "f_prime": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "set_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "wavelength_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_atom_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_f_prime_refined": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_f_double_prime_refined": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "phasing_MIR": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "FOM": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "FOM_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "FOM_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "reflns": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_acentric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_centric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_criterion": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_number_derivatives": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "phasing_MIR_der": {
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "der_set_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "native_set_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number_of_sites": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "power_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "power_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reflns_acentric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_anomalous": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_centric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_criteria": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_R_kraut_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_kraut_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_kraut": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_loc_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_loc_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_loc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_fom_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_fom_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_fom": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_power": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_cullis": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_reflns": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "phasing_MIR_der_refln": {
        "der_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "F_calc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_calc_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_meas": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_meas_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_meas_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_meas_sigma_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "HL_A_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "HL_B_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "HL_C_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "HL_D_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "index_h": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_k": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_l": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "phase_calc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "set_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "phasing_MIR_der_shell": {
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "der_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "fom": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ha_ampl": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "loc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "phase": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "power": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_kraut": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reflns": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_R_cullis_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_cullis_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_kraut_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_kraut_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_loc_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_loc_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_power_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_power_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_fom_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_fom_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_reflns_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_reflns_acentric": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "phasing_MIR_der_site": {
        "atom_type_symbol": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "B_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_iso_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_x_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_y_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_z_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "der_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "fract_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_x_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_y_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_z_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "occupancy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_anom": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_anom_su": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_iso_su": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "phasing_MIR_shell": {
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "FOM": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "FOM_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "FOM_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "loc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_phase": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "power": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_kraut": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reflns": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_acentric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_anomalous": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_centric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_loc_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_loc_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_power_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_power_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_kraut_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_kraut_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_cullis_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_cullis_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "phasing_set": {
        "cell_angle_alpha": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cell_angle_beta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cell_angle_gamma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cell_length_a": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cell_length_b": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cell_length_c": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "detector_specific": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "detector_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "radiation_source_specific": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "radiation_wavelength": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temp": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_temp_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "phasing_set_refln": {
        "set_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "F_meas": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_meas_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_meas_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_meas_sigma_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "index_h": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_k": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_l": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "publ": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "contact_author": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "contact_author_address": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "contact_author_email": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "contact_author_fax": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "contact_author_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "contact_author_phone": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "contact_letter": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "manuscript_creation": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "manuscript_processed": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "manuscript_text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "requested_category": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "FA",
                "FI",
                "FO",
                "FM",
                "CI",
                "CO",
                "CM",
                "EI",
                "EO",
                "EM",
                "AD",
                "SC",
            ],
        },
        "requested_coeditor_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "requested_journal": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_abstract": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_acknowledgements": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_comment": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_discussion": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_experimental": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_exptl_prep": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_exptl_refinement": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_exptl_solution": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_figure_captions": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_introduction": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_references": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_synopsis": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_table_legends": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_title": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "section_title_footnote": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "publ_author": {
        "address": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "email": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "footnote": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id_iucr": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "publ_body": {
        "contents": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "element": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "section",
                "subsection",
                "subsubsection",
                "appendix",
                "footnote",
            ],
        },
        "format": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["ascii", "cif", "latex", "sgml", "tex", "troff"],
        },
        "label": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "title": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "publ_manuscript_incl": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "extra_defn": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "extra_info": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "extra_item": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "refine": {
        "aniso_B[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "aniso_B[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_iso_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_iso_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_iso_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_coeff_Fo_to_Fc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_coeff_Fo_to_Fc_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "diff_density_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "diff_density_max_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "diff_density_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "diff_density_min_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "diff_density_rms": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "diff_density_rms_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ls_abs_structure_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ls_abs_structure_Flack": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_abs_structure_Flack_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_abs_structure_Rogers": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_abs_structure_Rogers_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_extinction_coef": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_extinction_coef_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_extinction_expression": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ls_extinction_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ls_goodness_of_fit_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_goodness_of_fit_all_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_goodness_of_fit_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_goodness_of_fit_obs_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_hydrogen_treatment": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "refall",
                "refxyz",
                "refU",
                "noref",
                "constr",
                "mixed",
                "undef",
            ],
        },
        "ls_matrix_type": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "full",
                "fullcycle",
                "atomblock",
                "userblock",
                "diagonal",
                "sparse",
            ],
        },
        "ls_number_constraints": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ls_number_parameters": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ls_number_reflns_all": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ls_number_reflns_obs": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ls_number_reflns_R_free": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ls_number_reflns_R_work": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ls_number_restraints": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ls_percent_reflns_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_percent_reflns_R_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_R_factor_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_R_factor_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_R_factor_R_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_R_factor_R_free_error": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_R_factor_R_free_error_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ls_R_factor_R_work": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_R_Fsqd_factor_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_R_I_factor_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_redundancy_reflns_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_redundancy_reflns_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_restrained_S_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_restrained_S_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_shift_over_esd_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_shift_over_esd_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_structure_factor_coef": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["F", "Fsqd", "Inet"],
        },
        "ls_weighting_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ls_weighting_scheme": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sigma", "unit", "calc"],
        },
        "ls_wR_factor_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_wR_factor_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_wR_factor_R_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_wR_factor_R_work": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "solvent_model_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "solvent_model_param_bsol": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "solvent_model_param_ksol": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_coeff_I_to_Fcsqd_work": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_coeff_I_to_Fcsqd_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_complete": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_R_factor_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_goodness_of_fit_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_goodness_of_fit_ref": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_shift_over_su_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_shift_over_su_max_lt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_shift_over_su_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_shift_over_su_mean_lt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_ls_sigma_I": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_ls_sigma_F": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_ls_sigma_Fsqd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_data_cutoff_high_absF": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_data_cutoff_high_rms_absF": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_data_cutoff_low_absF": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_isotropic_thermal_model": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ls_cross_valid_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_method_to_determine_struct": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_starting_model": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_stereochemistry_target_values": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_R_Free_selection_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_stereochem_target_val_spec_case": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_overall_ESU_R": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_overall_ESU_R_Free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_solvent_vdw_probe_radii": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_solvent_ion_probe_radii": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_solvent_shrinkage_radii": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_real_space_R": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_density_correlation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_pd_number_of_powder_patterns": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_pd_number_of_points": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_pd_meas_number_of_points": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_pd_proc_ls_prof_R_factor": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_pd_proc_ls_prof_wR_factor": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_pd_Marquardt_correlation_coeff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_pd_Fsqrd_R_factor": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_pd_ls_matrix_band_width": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_overall_phase_error": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_overall_SU_R_free_Cruickshank_DPI": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_overall_SU_R_free_Blow_DPI": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_overall_SU_R_Blow_DPI": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_TLS_residual_ADP_flag": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["LIKELY RESIDUAL", "UNVERIFIED"],
        },
        "pdbx_diffrn_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "overall_SU_B": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "overall_SU_ML": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "overall_SU_R_Cruickshank_DPI": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "overall_SU_R_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "overall_FOM_free_R_set": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "overall_FOM_work_R_set": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_average_fsc_overall": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_average_fsc_work": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_average_fsc_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_overall_ESU_B": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_overall_ESU_ML": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "refine_analyze": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "Luzzati_coordinate_error_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Luzzati_coordinate_error_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Luzzati_d_res_low_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Luzzati_d_res_low_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Luzzati_sigma_a_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Luzzati_sigma_a_free_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "Luzzati_sigma_a_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Luzzati_sigma_a_obs_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number_disordered_residues": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_sum_hydrogen": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_sum_non_hydrogen": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RG_d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RG_d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RG_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RG_work": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RG_free_work_ratio": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Luzzati_d_res_high_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "refine_B_iso": {
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "class": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "treatment": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["fixed", "isotropic", "anisotropic"],
        },
        "value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_residue_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_strand": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_residue_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "refine_funct_minimized": {
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number_terms": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "residual": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "weight": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "refine_hist": {
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "cycle_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number_atoms_solvent": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "number_atoms_total": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "number_reflns_all": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "number_reflns_obs": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "number_reflns_R_free": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "number_reflns_R_work": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "R_factor_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_R_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_R_work": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_number_residues_total": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_B_iso_mean_ligand": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_B_iso_mean_solvent": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_number_atoms_protein": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_number_atoms_nucleic_acid": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_number_atoms_ligand": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_number_atoms_lipid": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_number_atoms_carb": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_pseudo_atom_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_number_atoms_solvent": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_number_atoms_total": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "refine_ls_restr": {
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "criterion": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dev_ideal": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dev_ideal_target": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "rejects": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "weight": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_restraint_function": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "refine_ls_restr_ncs": {
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dom_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ncs_model_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "rms_dev_B_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rms_dev_position": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "weight_B_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "weight_position": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_rms": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_weight": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_ens_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "refine_ls_restr_type": {
        "distance_cutoff_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "distance_cutoff_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "refine_ls_shell": {
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number_reflns_all": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "number_reflns_obs": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "number_reflns_R_free": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "number_reflns_R_work": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "percent_reflns_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "percent_reflns_R_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_R_free_error": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_R_work": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "redundancy_reflns_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "redundancy_reflns_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wR_factor_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wR_factor_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wR_factor_R_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wR_factor_R_work": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_complete": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_coeff_Fo_to_Fc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_coeff_Fo_to_Fc_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_coeff_I_to_Fcsqd_work": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_coeff_I_to_Fcsqd_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_total_number_of_bins_used": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_phase_error": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_fsc_work": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_fsc_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_R_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "refine_occupancy": {
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "class": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "treatment": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["fix", "ref"],
        },
        "value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "refln": {
        "A_calc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "A_calc_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "A_meas": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "A_meas_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_calc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_calc_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_meas": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_meas_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crystal_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "F_calc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_calc_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_meas": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_meas_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_meas_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_meas_sigma_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_squared_calc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_squared_meas": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "F_squared_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "index_h": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_k": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_l": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "intensity_calc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "intensity_meas": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "intensity_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "status": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["o", "<", "-", "x", "h", "l", "f"],
        },
        "phase_calc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "phase_meas": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "refinement_status": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["incl", "excl", "extn"],
        },
        "scale_group_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sint_over_lambda": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "symmetry_epsilon": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "symmetry_multiplicity": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "wavelength": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wavelength_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "class_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "d_spacing": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "include_status": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["o", "<", "-", "x", "h", "l"],
        },
        "mean_path_length_tbar": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_F_calc_part_solvent": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_phase_calc_part_solvent": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_F_calc_with_solvent": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_phase_calc_with_solvent": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_anom_difference": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_anom_difference_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_I_plus": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_I_minus": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_F_plus": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_F_minus": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_I_plus_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_I_minus_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_F_minus_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_F_plus_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_HL_A_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_HL_B_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_HL_C_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_HL_D_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_fiber_layer": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_fiber_coordinate": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_fiber_F_meas_au": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_FWT": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_PHWT": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_DELFWT": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_DELPHWT": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_diffrn_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_r_free_flag": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_anomalous_diff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_anomalous_diff_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_phase_cycle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_cos_phase_calc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_sin_phase_calc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_signal": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_signal_status": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["m", "o", "u"],
        },
    },
    "refln_sys_abs": {
        "I": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "I_over_sigmaI": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "index_h": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_k": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "index_l": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "sigmaI": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "reflns": {
        "B_iso_Wilson_estimate": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "data_reduction_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "data_reduction_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "d_resolution_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_resolution_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "limit_h_max": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "limit_h_min": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "limit_k_max": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "limit_k_min": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "limit_l_max": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "limit_l_min": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number_all": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number_obs": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "observed_criterion": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "observed_criterion_F_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "observed_criterion_F_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "observed_criterion_I_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "observed_criterion_I_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "observed_criterion_sigma_F": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "observed_criterion_sigma_I": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "percent_possible_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_free_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "Rmerge_F_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Rmerge_F_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Friedel_coverage": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number_gt": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "threshold_expression": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_redundancy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_netI_over_av_sigmaI": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_netI_over_sigmaI": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_res_netI_over_av_sigmaI_2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_res_netI_over_sigmaI_2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_chi_squared": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_scaling_rejects": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_d_res_high_opt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_d_res_low_opt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_d_res_opt_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "phase_calculation_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_Rrim_I_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rpim_I_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_d_opt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_number_measured_all": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_diffrn_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_CC_half": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_CC_star": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_split": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_redundancy_reflns_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_number_anomalous": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_Rrim_I_all_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rpim_I_all_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rmerge_I_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rmerge_I_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rmerge_I_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rsym_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_diffraction_limit_axis_1_ortho[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_diffraction_limit_axis_1_ortho[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_diffraction_limit_axis_1_ortho[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_diffraction_limit_axis_2_ortho[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_diffraction_limit_axis_2_ortho[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_diffraction_limit_axis_2_ortho[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_diffraction_limit_axis_3_ortho[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_diffraction_limit_axis_3_ortho[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_diffraction_limit_axis_3_ortho[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_diffraction_limit_1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_diffraction_limit_2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_diffraction_limit_3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_B_tensor_eigenvector_1_ortho[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_B_tensor_eigenvector_1_ortho[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_B_tensor_eigenvector_1_ortho[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_B_tensor_eigenvector_2_ortho[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_B_tensor_eigenvector_2_ortho[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_B_tensor_eigenvector_2_ortho[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_B_tensor_eigenvector_3_ortho[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_B_tensor_eigenvector_3_ortho[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_B_tensor_eigenvector_3_ortho[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_B_tensor_eigenvalue_1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_B_tensor_eigenvalue_2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_aniso_B_tensor_eigenvalue_3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_orthogonalization_convention": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_percent_possible_ellipsoidal": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_percent_possible_spherical": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_percent_possible_ellipsoidal_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_percent_possible_spherical_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_redundancy_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_CC_half_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_absDiff_over_sigma_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_percent_possible_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_observed_signal_threshold": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_signal_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["local <I/sigmaI>", "local wCC_half"],
        },
        "pdbx_signal_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_signal_software_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_CC_split_method": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["by_observation", "by_lattice"],
        },
    },
    "reflns_scale": {
        "meas_F": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "meas_F_squared": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "meas_intensity": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "reflns_shell": {
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "meanI_over_sigI_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "meanI_over_sigI_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number_measured_all": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "number_measured_obs": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "number_possible": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number_unique_all": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "number_unique_obs": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "percent_possible_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Rmerge_F_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Rmerge_F_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "meanI_over_sigI_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "meanI_over_uI_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "meanI_over_uI_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number_measured_gt": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "number_unique_gt": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "percent_possible_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Rmerge_F_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Rmerge_I_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_redundancy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_chi_squared": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_netI_over_sigmaI_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_netI_over_sigmaI_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rrim_I_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rpim_I_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_rejects": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_diffrn_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_CC_half": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_CC_star": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_R_split": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_redundancy_reflns_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_number_anomalous": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_Rrim_I_all_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rpim_I_all_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rmerge_I_all_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "percent_possible_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Rmerge_I_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Rmerge_I_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_Rsym_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_percent_possible_ellipsoidal": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_percent_possible_spherical": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_percent_possible_ellipsoidal_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_percent_possible_spherical_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_redundancy_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_CC_half_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_absDiff_over_sigma_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_percent_possible_anomalous": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "software": {
        "citation_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "classification": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "compiler_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "compiler_version": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "contact_author": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "contact_author_email": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "description": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dependencies": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "hardware": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "language": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Ada",
                "assembler",
                "Awk",
                "Basic",
                "C++",
                "C/C++",
                "C",
                "csh",
                "Fortran",
                "Fortran_77",
                "Fortran 77",
                "Fortran 90",
                "Java",
                "Java & Fortran",
                "ksh",
                "Pascal",
                "Perl",
                "Python",
                "Python/C++",
                "sh",
                "Tcl",
                "Other",
            ],
        },
        "location": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "mods": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "os": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "os_version": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["program", "library", "package", "filter", "jiffy", "other"],
        },
        "version": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "struct": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "title": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_center_of_mass_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_center_of_mass_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_center_of_mass_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_structure_determination_methodology": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["experimental", "integrative", "computational"],
        },
        "pdbx_descriptor": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_model_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_formula_weight": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_formula_weight_method": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_model_type_details": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_CASP_flag": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "pdbx_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_title_text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "struct_asym": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_modified": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_blank_PDB_chainid_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "pdbx_PDB_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_type": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "ATOMN",
                "ATOMP",
                "ATOMS",
                "HETAD",
                "HETAS",
                "HETAI",
                "HETAIN",
                "HETAC",
                "HETIC",
            ],
        },
        "pdbx_order": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_fraction_per_asym_unit": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_missing_num_begin_of_chain_not_in_seqres": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_missing_num_end_of_chain_not_in_seqres": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_missing_num_begin_of_chain_in_seqres": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "struct_biol": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_parent_biol_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_formula_weight": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_formula_weight_method": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_aggregation_state": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["MONOMER", "DIMER", "TRIMER", "TETRAMER", "HEXAMER", "MORE"],
        },
        "pdbx_assembly_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "struct_biol_gen": {
        "asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "biol_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "pdbx_full_symmetry_operation": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_order": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_new_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_new_pdb_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_color_red": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_color_green": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_color_blue": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_after_begin_residue_no": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_after_end_residue_no": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_before_begin_residue_no": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_before_end_residue_no": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "struct_biol_keywords": {
        "biol_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "struct_biol_view": {
        "biol_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "rot_matrix[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_vector[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_vector[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_vector[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "struct_conf": {
        "beg_label_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "beg_label_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "beg_label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "beg_auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "beg_auth_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "beg_auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "conf_type_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_label_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_label_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_auth_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_beg_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_end_PDB_ins_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_PDB_helix_class": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_PDB_helix_length": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_PDB_helix_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "struct_conf_type": {
        "criteria": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "reference": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "struct_conn": {
        "conn_type_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["covale", "disulf", "metalc", "hydrog"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_label_alt_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_label_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_label_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_label_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_auth_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_auth_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_role": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "ptnr2_label_alt_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_label_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_label_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_label_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_auth_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_auth_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_role": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "pdbx_ptnr1_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr1_auth_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr1_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr1_standard_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr2_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr2_auth_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr2_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr3_auth_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr3_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr3_auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ptnr3_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr3_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr3_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr3_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr3_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr3_label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ptnr3_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr3_label_seq_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_PDB_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_dist_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_value_order": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sing", "doub", "trip", "quad"],
        },
        "pdbx_leaving_atom_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["both", "one", "none"],
        },
        "pdbx_ptnr1_mod_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ptnr1_sugar_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ptnr1_replaced_atom": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr3_auth_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ptnr1_atom_stereo_config": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["R", "S", "N"],
        },
        "pdbx_ptnr1_leaving_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ptnr2_atom_stereo_config": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["R", "S", "N"],
        },
        "pdbx_ptnr2_leaving_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_role": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "N-Glycosylation",
                "O-Glycosylation",
                "S-Glycosylation",
                "C-Mannosylation",
            ],
        },
    },
    "struct_conn_type": {
        "criteria": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "reference": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "struct_keywords": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_keywords": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "struct_mon_details": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "prot_cis": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSCC": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "RSR": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "struct_mon_nucl": {
        "alpha": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "beta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chi1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chi2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "delta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "epsilon": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "gamma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "mean_B_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_B_base": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_B_phos": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_B_sugar": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "nu0": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "nu1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "nu2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "nu3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "nu4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "P": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSCC_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSCC_base": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSCC_phos": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSCC_sugar": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSR_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSR_base": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSR_phos": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSR_sugar": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "tau0": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "tau1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "tau2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "tau3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "tau4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "taum": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "zeta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "struct_mon_prot": {
        "chi1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chi2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chi3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chi4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chi5": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "RSCC_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSCC_main": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSCC_side": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSR_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSR_main": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSR_side": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_B_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_B_main": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_B_side": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "omega": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "phi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "psi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "struct_mon_prot_cis": {
        "label_alt_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_auth_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_label_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_label_comp_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_label_seq_id_2": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_model_num": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_omega_angle": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "struct_ncs_dom": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_ens_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "struct_ncs_dom_lim": {
        "beg_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "beg_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "dom_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "selection_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_component_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_refine_code": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pdbx_ens_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "struct_ncs_ens": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "point_group": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "struct_ncs_ens_gen": {
        "dom_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dom_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ens_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "oper_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "struct_ncs_oper": {
        "code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["given", "generate"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "matrix[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "struct_ref": {
        "biol_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "seq_align": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["complete", "partial"],
        },
        "seq_dif": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "pdbx_db_accession": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_db_isoform": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_seq_one_letter_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_align_begin": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_align_end": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "struct_ref_seq": {
        "db_align_beg": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "db_align_end": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ref_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "seq_align_beg": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "seq_align_end": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_strand_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_db_accession": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_db_align_beg_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_db_align_end_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_PDB_id_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_seq_align_beg": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_seq_align_end": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_seq_align_beg_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_seq_align_end_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "struct_ref_seq_dif": {
        "align_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_mon_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "mon_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_pdb_id_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_pdb_strand_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_pdb_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_seq_db_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_seq_db_accession_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_seq_db_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "struct_sheet": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number_strands": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "struct_sheet_hbond": {
        "range_1_beg_label_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_1_beg_label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_1_end_label_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_1_end_label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_2_beg_label_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_2_beg_label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_2_end_label_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_2_end_label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_1_beg_auth_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_1_beg_auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_1_end_auth_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_1_end_auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_2_beg_auth_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_2_beg_auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_2_end_auth_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_2_end_auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sheet_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_range_1_beg_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_1_beg_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_1_end_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_1_end_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_1_beg_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_1_beg_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_1_beg_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_1_end_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_1_end_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_1_end_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_2_beg_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_2_beg_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_2_beg_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_2_end_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_2_end_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_range_2_end_label_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "struct_sheet_order": {
        "offset": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "range_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sense": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["parallel", "anti-parallel"],
        },
        "sheet_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "struct_sheet_range": {
        "beg_label_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "beg_label_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "beg_label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_label_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_label_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "beg_auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "beg_auth_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "beg_auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_auth_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sheet_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "pdbx_beg_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_end_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "struct_sheet_topology": {
        "offset": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "range_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sense": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["parallel", "anti-parallel"],
        },
        "sheet_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "struct_site": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_num_residues": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "pdbx_evidence_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_auth_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "struct_site_gen": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_atom_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "site_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "pdbx_auth_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_num_res": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "struct_site_keywords": {
        "site_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "struct_site_view": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "rot_matrix[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rot_matrix[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "site_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "symmetry": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "cell_setting": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "triclinic",
                "monoclinic",
                "orthorhombic",
                "tetragonal",
                "rhombohedral",
                "trigonal",
                "hexagonal",
                "cubic",
            ],
        },
        "Int_Tables_number": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "space_group_name_Hall": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "space_group_name_H-M": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_full_space_group_name_H-M": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "symmetry_equiv": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pos_as_xyz": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "audit_link": {
        "block_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "block_description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "diffrn_reflns_class": {
        "av_R_eq": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "av_sgI/I": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "av_uI/I": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "refine_ls_class": {
        "code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_Fsqd_factor": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_I_factor": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wR_factor_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "reflns_class": {
        "code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number_gt": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number_total": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "R_factor_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_gt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_Fsqd_factor": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_I_factor": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wR_factor_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "space_group": {
        "crystal_system": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "triclinic",
                "monoclinic",
                "orthorhombic",
                "tetragonal",
                "trigonal",
                "hexagonal",
                "cubic",
            ],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "IT_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "name_Hall": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name_H-M_alt": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "space_group_symop": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "operation_xyz": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sg_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "valence_param": {
        "atom_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_1_valence": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "atom_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_2_valence": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "B": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ref_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "Ro": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "valence_ref": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "reference": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_audit": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "current_version": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_version": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "revision_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "major_version": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "minor_version": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "revision_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Entry title",
                "Function and keywords",
                "Entry authorship",
                "Citation",
                "Polymer description",
                "Non-polymer description",
                "Source and taxonomy",
                "Experimental method",
                "Refinement description",
                "Data collection",
                "Biological assembly",
                "Geometry validation",
                "Sequence database correspondence",
                "Secondary structure",
                "Binding sites and description",
                "Atom nomenclature",
                "Atom element type assignment",
                "Atom occupancy",
                "Atom temperature factor",
                "Solvent atom position",
                "Linkage",
                "Advisory",
                "Version format compliance",
                "Flag nonstandard coordinate frame",
                "Flag residual B-value",
                "Initial release",
                "Other",
            ],
        },
    },
    "pdbx_audit_author": {
        "address": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_database_message": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "message_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "content_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["DEPOSIT", "REMINDER", "QUERY", "OTHER"],
        },
        "message_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["FAX", "EMAIL", "MAIL", "PHONE"],
        },
        "sender": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sender_address_fax": {
            "data_type": "fax",
            "regex": "[_,.;:\"&<>/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "sender_address_phone": {
            "data_type": "phone",
            "regex": "[_,.;:\"&<>/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "sender_address_email": {
            "data_type": "email",
            "regex": "[_,.;:\"&<>/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "sender_address_mail": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "receiver": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "receiver_address_fax": {
            "data_type": "fax",
            "regex": "[_,.;:\"&<>/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "receiver_address_phone": {
            "data_type": "phone",
            "regex": "[_,.;:\"&<>/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "receiver_address_email": {
            "data_type": "email",
            "regex": "[_,.;:\"&<>/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "receiver_address_mail": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "message": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_database_PDB_obs_spr": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["OBSLTE", "SPRSDE"],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "pdb_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "replace_pdb_id": {
            "data_type": "pdbx_PDB_obsoleted_db_id",
            "regex": "[0-9][0-9a-zA-Z]{3}( [0-9][0-9a-zA-Z]{3})*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_database_proc": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "cycle_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "date_begin_cycle": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_end_cycle": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_database_remark": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_database_status": {
        "status_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "PROC",
                "WAIT",
                "REL",
                "HOLD",
                "HPUB",
                "REFI",
                "OBS",
                "WDRN",
                "AUTH",
                "POLC",
                "REPL",
                "AUCO",
                "TRSF",
                "RMVD",
                "DEL",
                "REV",
                "UPD",
                "BIB",
            ],
        },
        "author_release_status_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["REL", "HOLD", "HPUB", "REFI", "OBS", "WDRN"],
        },
        "status_code_sf": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "PROC",
                "WAIT",
                "REL",
                "HOLD",
                "HPUB",
                "OBS",
                "WDRN",
                "AUTH",
                "POLC",
                "REPL",
                "RMVD",
            ],
        },
        "status_code_mr": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "PROC",
                "WAIT",
                "REL",
                "HOLD",
                "HPUB",
                "OBS",
                "WDRN",
                "AUTH",
                "POLC",
                "REPL",
                "AUCO",
                "RMVD",
            ],
        },
        "dep_release_code_coordinates": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "RELEASE NOW",
                "HOLD FOR PUBLICATION",
                "HOLD FOR 4 WEEKS",
                "HOLD FOR 6 WEEKS",
                "HOLD FOR 8 WEEKS",
                "HOLD FOR 6 MONTHS",
                "HOLD FOR 1 YEAR",
            ],
        },
        "dep_release_code_sequence": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["RELEASE NOW", "HOLD FOR RELEASE"],
        },
        "dep_release_code_struct_fact": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "RELEASE NOW",
                "HOLD FOR PUBLICATION",
                "HOLD FOR 4 WEEKS",
                "HOLD FOR 6 WEEKS",
                "HOLD FOR 8 WEEKS",
                "HOLD FOR 6 MONTHS",
                "HOLD FOR 1 YEAR",
                "HOLD FOR 4 YEARS",
            ],
        },
        "dep_release_code_nmr_constraints": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "RELEASE NOW",
                "HOLD FOR PUBLICATION",
                "HOLD FOR 4 WEEKS",
                "HOLD FOR 6 WEEKS",
                "HOLD FOR 6 MONTHS",
                "HOLD FOR 1 YEAR",
            ],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "recvd_deposit_form": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "date_deposition_form": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_begin_deposition": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_begin_processing": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_end_processing": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_begin_release_preparation": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_author_release_request": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "recvd_coordinates": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "date_coordinates": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "recvd_struct_fact": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "date_struct_fact": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "recvd_nmr_constraints": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "date_nmr_constraints": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "recvd_internal_approval": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "recvd_manuscript": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "date_manuscript": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "name_depositor": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "recvd_author_approval": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "author_approval_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["implicit", "explicit"],
        },
        "date_author_approval": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "recvd_initial_deposition_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_submitted": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "rcsb_annotator": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "date_of_sf_release": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_of_mr_release": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_of_PDB_release": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_hold_coordinates": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_hold_struct_fact": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_hold_nmr_constraints": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "hold_for_publication": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "SG_entry": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "pdb_date_of_author_approval": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "deposit_site": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["NDB", "RCSB", "PDBE", "PDBJ", "BMRB", "BNL", "PDBC"],
        },
        "process_site": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["NDB", "RCSB", "PDBE", "PDBJ", "BNL", "PDBC"],
        },
        "dep_release_code_chemical_shifts": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "recvd_chemical_shifts": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "date_chemical_shifts": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_hold_chemical_shifts": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "status_code_cs": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "PROC",
                "WAIT",
                "AUTH",
                "POLC",
                "REPL",
                "AUCO",
                "REL",
                "HOLD",
                "HPUB",
                "OBS",
                "RMVD",
                "WDRN",
            ],
        },
        "date_of_cs_release": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_nmr_data": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_hold_nmr_data": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_of_nmr_data_release": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "dep_release_code_nmr_data": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "RELEASE NOW",
                "HOLD FOR PUBLICATION",
                "HOLD FOR 6 MONTHS",
                "HOLD FOR 1 YEAR",
            ],
        },
        "recvd_nmr_data": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "status_code_nmr_data": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "PROC",
                "WAIT",
                "AUTH",
                "AUCO",
                "POLC",
                "REPL",
                "REL",
                "HOLD",
                "HPUB",
                "OBS",
                "RMVD",
                "WDRN",
            ],
        },
        "methods_development_category": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "CAPRI",
                "CASP",
                "CASD-NMR",
                "FoldIt",
                "GPCR Dock",
                "D3R",
                "RNA-Puzzles",
            ],
        },
        "pdb_format_compatible": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "post_rel_status": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "PROC",
                "WAIT",
                "HOLD",
                "HPUB",
                "OBS",
                "WDRN",
                "AUTH",
                "REPL",
                "AUCO",
            ],
        },
        "post_rel_recvd_coord": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "post_rel_recvd_coord_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "auth_req_rel_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "ndb_tid": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "status_coordinates_in_NDB": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "P", "N"],
        },
        "date_revised": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "replaced_entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "revision_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "revision_description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_annotator": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "date_of_NDB_release": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_released_to_PDB": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "skip_PDB_REMARK_500": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "skip_PDB_REMARK": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "title_suppression": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "date_accepted_terms_and_conditions": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
    },
    "pdbx_entity_name": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "RCSB_NAME",
                "RCSB_SYNONYM",
                "SWS-NAME",
                "SWS-SYNONYM",
                "SWS-KEYWORD",
                "GB-NAME",
                "GB-SYNONYM",
                "GB-KEYWORD",
            ],
        },
    },
    "pdbx_prerelease_seq": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_one_letter_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_poly_seq_scheme": {
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "hetero": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "mon_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_strand_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ndb_seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdb_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_mon_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_mon_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_nonpoly_scheme": {
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "mon_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_strand_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ndb_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_mon_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_mon_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_refine": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "R_factor_all_no_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_obs_no_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "free_R_factor_4sig_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "free_R_factor_no_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "free_R_error_no_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "free_R_val_test_set_size_perc_no_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "free_R_val_test_set_ct_no_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number_reflns_obs_no_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_all_4sig_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_obs_4sig_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "free_R_val_4sig_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "free_R_val_test_set_size_perc_4sig_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "free_R_val_test_set_ct_4sig_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number_reflns_obs_4sig_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "free_R_val_no_cutoff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_struct_sheet_hbond": {
        "range_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "sheet_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_1_label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_1_label_seq_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "range_1_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_1_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_1_auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_1_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_1_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_1_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_1_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_2_label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_2_label_seq_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "range_2_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_2_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_2_auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "range_2_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_2_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_2_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "range_2_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_xplor_file": {
        "serial_no": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "param_file": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "topol_file": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_refine_aux_file": {
        "serial_no": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "file_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["PARAMETER", "TOPOLOGY"],
        },
    },
    "pdbx_database_related": {
        "db_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "BIOISIS",
                "BMCD",
                "BMRB",
                "EMDB",
                "NDB",
                "PDB",
                "PDB-Dev",
                "SASBDB",
                "TargetDB",
                "TargetTrack",
            ],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_id": {
            "data_type": "pdbx_related_db_id",
            "regex": "[][_.:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "content_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "minimized average structure",
                "representative structure",
                "ensemble",
                "derivative structure",
                "native structure",
                "associated EM volume",
                "other EM volume",
                "focused EM volume",
                "consensus EM volume",
                "associated NMR restraints",
                "associated structure factors",
                "associated SAS data",
                "protein target sequence and/or protocol data",
                "split",
                "re-refinement",
                "complete structure",
                "unspecified",
                "other",
            ],
        },
    },
    "pdbx_entity_assembly": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "biol_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "num_copies": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_entity_src_syn": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "organism_scientific": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "organism_common_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "strain": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ncbi_taxonomy_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_src_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_alt_source_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sample", "model"],
        },
        "pdbx_beg_seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_end_seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_exptl_crystal_grow_comp": {
        "crystal_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sol_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "conc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "conc_range": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "conc_units": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "mg/ml",
                "g/l",
                "ug/ml",
                "ug/ul",
                "ng/ul",
                "molar",
                "millimolar",
                "micromolar",
                "percent",
                "percent_weight_by_volume",
                "percent_weight_by_weight",
                "percent_volume_by_volume",
                "percent_volume_by_weight",
                "nanomolar",
            ],
        },
    },
    "pdbx_exptl_crystal_grow_sol": {
        "crystal_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "sol_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["precipitant", "reservoir", "macromolecule"],
        },
        "volume": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "volume_units": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["microliter", "milliliter", "nanoliter"],
        },
        "pH": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_exptl_crystal_cryo_treatment": {
        "crystal_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "final_solution_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "soaking_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "cooling_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "annealing_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_refine_tls": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "method": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["refined", "fitted"],
        },
        "origin_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origin_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "origin_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "T[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "T[1][1]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "T[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "T[1][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "T[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "T[1][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "T[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "T[2][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "T[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "T[2][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "T[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "T[3][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "L[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "L[1][1]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "L[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "L[1][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "L[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "L[1][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "L[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "L[2][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "L[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "L[2][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "L[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "L[3][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[1][1]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[1][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[1][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[2][1]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[2][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[2][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[3][1]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[3][2]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "S[3][3]_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_refine_tls_group": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbx_refine_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "refine_tls_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "beg_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "selection": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "selection_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_contact_author": {
        "id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "20",
                "21",
                "22",
                "23",
                "24",
                "25",
                "26",
                "27",
                "28",
                "29",
                "30",
            ],
        },
        "address_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "address_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "address_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "legacy_address": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "city": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "state_province": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "postal_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "email": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "fax": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name_first": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name_last": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name_mi": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name_salutation": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["Dr.", "Prof.", "Mr.", "Ms.", "Mrs."],
        },
        "country": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "continent": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "AFRICA",
                "ANTARTICA",
                "ASIA",
                "AUSTRALIA",
                "EUROPE",
                "NORTH AMERICA",
                "SOUTH AMERICA",
            ],
        },
        "phone": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "role": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "principal investigator/group leader",
                "responsible scientist",
                "investigator",
            ],
        },
        "organization_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["academic", "commercial", "government", "other"],
        },
        "identifier_ORCID": {
            "data_type": "orcid_id",
            "regex": "[0-9]{4}-[0-9]{4}-[0-9]{4}-([0-9]{3}X|[0-9]{4})",
            "options": [],
        },
    },
    "pdbx_SG_project": {
        "id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"],
        },
        "project_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "PSI:Biology",
                "PSI, Protein Structure Initiative",
                "NIAID, National Institute of Allergy and Infectious Diseases",
                "NPPSFA, National Project on Protein Structural and Functional Analyses",
                "Enzyme Function Initiative",
            ],
        },
        "full_name_of_center": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Accelerated Technologies Center for Gene to 3D Structure",
                "Bacterial targets at IGS-CNRS, France",
                "Berkeley Structural Genomics Center",
                "Montreal-Kingston Bacterial Structural Genomics Initiative",
                "Chaperone-Enabled Studies of Epigenetic Regulation Enzymes",
                "Assembly, Dynamics and Evolution of Cell-Cell and Cell-Matrix Adhesions",
                "Center for Eukaryotic Structural Genomics",
                "Structure, Dynamics and Activation Mechanisms of Chemokine Receptors",
                "Center for High-Throughput Structural Biology",
                "Center for Structural Biology of Infectious Diseases",
                "Center for Structural Genomics of Infectious Diseases",
                "Center for Structures of Membrane Proteins",
                "GPCR Network",
                "Atoms-to-Animals: The Immune Function Network",
                "Integrated Center for Structure and Function Innovation",
                "Israel Structural Proteomics Center",
                "Joint Center for Structural Genomics",
                "Midwest Center for Macromolecular Research",
                "Midwest Center for Structural Genomics",
                "Center for Membrane Proteins of Infectious Diseases",
                "Mitochondrial Protein Partnership",
                "Membrane Protein Structural Biology Consortium",
                "Membrane Protein Structures by Solution NMR",
                "Marseilles Structural Genomics Program @ AFMB",
                "Medical Structural Genomics of Pathogenic Protozoa",
                "Structures of Mtb Proteins Conferring Susceptibility to Known Mtb Inhibitors",
                "Enzyme Discovery for Natural Product Biosynthesis",
                "Nucleocytoplasmic Transport: a Target for Cellular Control",
                "New York Consortium on Membrane Protein Structure",
                "New York Structural Genomics Research Consortium",
                "New York SGX Research Center for Structural Genomics",
                "New York Structural GenomiX Research Consortium",
                "Northeast Structural Genomics Consortium",
                "Partnership for Nuclear Receptor Signaling Code Biology",
                "Ontario Centre for Structural Proteomics",
                "Oxford Protein Production Facility",
                "Program for the Characterization of Secreted Effector Proteins",
                "Protein Structure Factory",
                "RIKEN Structural Genomics/Proteomics Initiative",
                "Structure 2 Function Project",
                "South Africa Structural Targets Annotation Database",
                "Southeast Collaboratory for Structural Genomics",
                "Structural Genomics Consortium",
                "Structural Genomics Consortium for Research on Gene Expression",
                "Structural Genomics of Pathogenic Protozoa Consortium",
                "Structural Proteomics in Europe",
                "Structural Proteomics in Europe 2",
                "Seattle Structural Genomics Center for Infectious Disease",
                "Scottish Structural Proteomics Facility",
                "Partnership for Stem Cell Biology",
                "TB Structural Genomics Consortium",
                "Partnership for T-Cell Biology",
                "Transcontinental EM Initiative for Membrane Protein Structure",
                "Structure-Function Studies of Tight Junction Membrane Proteins",
                "Transmembrane Protein Center",
                "Center for the X-ray Structure Determination of Human Transporters",
                "Structure-Function Analysis of Polymorphic CDI Toxin-Immunity Protein Complexes",
                "Mycobacterium Tuberculosis Structural Proteomics Project",
                "Paris-Sud Yeast Structural Genomics",
            ],
        },
        "initial_of_center": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "ATCG3D",
                "BIGS",
                "BSGC",
                "BSGI",
                "CEBS",
                "CELLMAT",
                "CESG",
                "CHSAM",
                "CHTSB",
                "CSBID",
                "CSGID",
                "CSMP",
                "GPCR",
                "IFN",
                "ISFI",
                "ISPC",
                "JCSG",
                "MCMR",
                "MCSG",
                "MPID",
                "MPP",
                "MPSBC",
                "MPSbyNMR",
                "MSGP",
                "MSGPP",
                "MTBI",
                "NatPro",
                "NHRs",
                "NPCXstals",
                "NYCOMPS",
                "NYSGRC",
                "NYSGXRC",
                "NYSGXRC",
                "NESG",
                "OCSP",
                "OPPF",
                "PCSEP",
                "PSF",
                "RSGI",
                "S2F",
                "SASTAD",
                "SECSG",
                "SGC",
                "SGCGES",
                "SGPP",
                "SPINE",
                "SPINE-2",
                "SSGCID",
                "SSPF",
                "STEMCELL",
                "TBSGC",
                "TCELL",
                "TEMIMPS",
                "TJMP",
                "TMPC",
                "TransportPDB",
                "UC4CDI",
                "XMTB",
                "YSG",
            ],
        },
    },
    "pdbx_atom_site_aniso_tls": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type_symbol": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "tls_group_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "U_tls[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U_tls[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U_tls[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U_tls[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U_tls[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "U_tls[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_nmr_details": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_nmr_sample_details": {
        "solution_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "contents": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "solvent_system": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "solution",
                "solid",
                "bicelle",
                "emulsion",
                "fiber",
                "filamentous virus",
                "gel solution",
                "gel solid",
                "liposome",
                "membrane",
                "micelle",
                "lyophilized powder",
                "oriented membrane film",
                "fibrous protein",
                "polycrystalline powder",
                "reverse micelle",
                "single crystal",
            ],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_nmr_exptl_sample": {
        "solution_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "component": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "concentration": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "concentration_range": {
            "data_type": "float-range",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?(--?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?)?",
            "options": [],
        },
        "concentration_units": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "%",
                "mM",
                "mg/mL",
                "nM",
                "pM",
                "M",
                "g/L",
                "ug/mL",
                "mg",
                "mg/L",
                "mg/uL",
                "ug/uL",
                "uM",
                "v/v",
                "w/v",
                "w/w",
                "% w/v",
                "% w/w",
                "% v/v",
                "saturated",
                "na",
            ],
        },
        "isotopic_labeling": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "concentration_err": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_nmr_exptl_sample_conditions": {
        "conditions_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "temperature": {
            "data_type": "float-range",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?(--?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?)?",
            "options": [],
        },
        "pressure_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pressure": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pH": {
            "data_type": "float-range",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?(--?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?)?",
            "options": [],
        },
        "ionic_strength": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ionic_strength_err": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ionic_strength_units": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["M", "mM", "Not defined"],
        },
        "label": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pH_err": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pH_units": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["pH", "pD", "pH*", "Not defined"],
        },
        "pressure_err": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temperature_err": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temperature_units": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["K", "C", "Not defined"],
        },
    },
    "pdbx_nmr_spectrometer": {
        "spectrometer_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "model": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "manufacturer": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "field_strength": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_nmr_exptl": {
        "experiment_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "conditions_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "solution_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "spectrometer_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "sample_state": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["isotropic", "anisotropic"],
        },
    },
    "pdbx_nmr_software": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "classification": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "version": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "authors": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_nmr_constraints": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "NOE_constraints_total": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NOE_intraresidue_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NOE_interentity_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NOE_sequential_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NOE_medium_range_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NOE_long_range_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "protein_phi_angle_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "protein_psi_angle_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "protein_chi_angle_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "protein_other_angle_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NOE_interproton_distance_evaluation": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "NOE_pseudoatom_corrections": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "NOE_motional_averaging_correction": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "hydrogen_bond_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "disulfide_bond_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NA_alpha-angle_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NA_beta-angle_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NA_gamma-angle_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NA_delta-angle_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NA_epsilon-angle_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NA_chi-angle_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NA_other-angle_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "NA_sugar_pucker_constraints_total_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "pdbx_nmr_ensemble": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "conformers_calculated_total_number": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "conformers_submitted_total_number": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "conformer_selection_criteria": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "representative_conformer": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "average_constraints_per_residue": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "average_constraint_violations_per_residue": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "maximum_distance_constraint_violation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "average_distance_constraint_violation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "maximum_upper_distance_constraint_violation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "maximum_lower_distance_constraint_violation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "distance_constraint_violation_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "maximum_torsion_angle_constraint_violation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "average_torsion_angle_constraint_violation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "torsion_angle_constraint_violation_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_nmr_ensemble_rms": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "residue_range_begin": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "chain_range_begin": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "residue_range_end": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "chain_range_end": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "backbone heavy atoms",
                "side chain heavy atoms",
                "all heavy atoms",
                "all atoms",
                "all backbone atoms",
            ],
        },
        "distance_rms_dev": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "distance_rms_dev_error": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "covalent_bond_rms_dev": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "covalent_bond_rms_dev_error": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "bond_angle_rms_dev": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "bond_angle_rms_dev_error": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "improper_torsion_angle_rms_dev": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "improper_torsion_angle_rms_dev_error": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "peptide_planarity_rms_dev": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "peptide_planarity_rms_dev_error": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dihedral_angles_rms_dev": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dihedral_angles_rms_dev_error": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "coord_average_rmsd_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_nmr_representative": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "conformer_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "selection_criteria": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_nmr_refine": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "software_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_nmr_force_constants": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "exptl_distance_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "exptl_distance_term_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["kcal/mol/A**2", "kJ/mol/nm**2", "other"],
        },
        "exptl_torsion_angles_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "exptl_torsion_angles_term_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["kcal/mol/rad**2", "kJ/mol/rad**2", "author"],
        },
        "exptl_J_coupling_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "exptl_J_coupling_term_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["kcal/mol/Hz**2", "kJ/mol/Hz**2", "other"],
        },
        "exptl_13C_shift_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "exptl_13C_shift_term_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["kcal/mol/ppm**2", "kJ/mol/ppm**2", "other"],
        },
        "exptl_1H_shift_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "exptl_1H_shift_term_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["kcal/mol/ppm**2", "kJ/mol/ppm**2", "other"],
        },
        "exptl_dipolar_coupling_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "exptl_dipolar_coupling_term_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["kcal/mol/Hz**2", "kJ/mol/Hz**2", "other"],
        },
        "exptl_D_isotope_shift_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "exptl_D_isotope_shift_term_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["kcal/mol/ppb**2", "kJ/mol/ppb**2", "other"],
        },
        "covalent_geom_bond_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "covalent_geom_bond_term_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["kcal/mol/A**2", "kJ/mol/nm**2", "other"],
        },
        "covalent_geom_angles_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "covalent_geom_angles_term_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["kcal/mol/rad**2", "kJ/mol/rad**2", "other"],
        },
        "covalent_geom_impropers_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "covalent_geom_impropers_term_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["kcal/mol/rad**2", "kJ/mol/rad**2", "other"],
        },
        "non-bonded_inter_van_der_Waals_term_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["quartic", "other"],
        },
        "non-bonded_inter_van_der_Waals_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "non-bonded_inter_van_der_Waals_term_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["kcal/mol/A**4", "kJ/mol/nm**4", "other"],
        },
        "non-bonded_inter_conf_db_potential_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "non-bonded_inter_radius_of_gyration_term": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "non-bonded_inter_radius_of_gyration_term_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["kcal/mol/ A**2", "kJ/mol/ nm**4", "other"],
        },
    },
    "ndb_struct_conf_na": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "double helix",
                "a-form double helix",
                "b-form double helix",
                "z-form double helix",
                "other right-handed double helix",
                "triple helix",
                "quadruple helix",
                "parallel strands",
                "internal loop",
                "bulge loop",
                "tetraloop",
                "hairpin loop",
                "two-way junction",
                "three-way junction",
                "four-way junction",
                "mismatched base pair",
            ],
        },
        "feature_count": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "ndb_struct_feature_na": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "pseudoknot",
                "intercalated base",
                "backbone turn",
                "intramolecular base triplet",
                "ribose zipper",
                "purine platform",
                "bent/kinked double helix",
            ],
        },
        "feature_count": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "ndb_struct_na_base_pair": {
        "model_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pair_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pair_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "i_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "i_symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "j_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "j_symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "i_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "shear": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "stretch": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "stagger": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "buckle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "propeller": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "opening": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "hbond_type_12": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "hbond_type_28": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "hbond_type_leontis_westhof": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "cWW",
                "tWW",
                "cWH",
                "cHW",
                "tWH",
                "tHW",
                "cWS",
                "cSW",
                "tWS",
                "tSW",
                "cHH",
                "tHH",
                "cHS",
                "cSH",
                "tHS",
                "tSH",
                "cSS",
                "tSS",
            ],
        },
    },
    "ndb_struct_na_base_pair_step": {
        "model_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "step_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "step_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "i_label_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_label_comp_id_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_label_seq_id_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "i_symmetry_1": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "j_label_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_label_comp_id_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_label_seq_id_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "j_symmetry_1": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "i_label_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_label_comp_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_label_seq_id_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "i_symmetry_2": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "j_label_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_label_comp_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_label_seq_id_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "j_symmetry_2": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "i_auth_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_PDB_ins_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_auth_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_PDB_ins_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_auth_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "i_PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_auth_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "j_PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "shift": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "slide": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rise": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "tilt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "roll": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "twist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "x_displacement": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "y_displacement": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "helical_rise": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "inclination": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "tip": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "helical_twist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "ndb_original_ndb_coordinates": {
        "coord_section": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        }
    },
    "pdbx_entity_nonpoly": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_phasing_dm": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "method": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "mask_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "fom_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reflns_acentric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_centric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "delta_phi_initial": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "delta_phi_final": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_phasing_dm_shell": {
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reflns_acentric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_centric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "delta_phi_initial": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "delta_phi_final": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_phasing_MAD_shell": {
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reflns_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reflns_centric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "fom_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_kraut_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_kraut_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_kraut": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "loc_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "loc_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "loc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "power_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "power_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "power": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_phasing_MAD_set": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "number_of_sites": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_acentric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_centric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "fom_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_kraut_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_kraut_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_kraut": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "loc_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "loc_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "loc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "power_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "power_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "power": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_phasing_MAD_set_shell": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reflns_acentric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns_centric": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "reflns": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "fom_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_cullis": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_kraut_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_kraut_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_kraut": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "loc_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "loc_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "loc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "power_centric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "power_acentric": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "power": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_phasing_MAD_set_site": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_type_symbol": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "Cartn_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_x_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_y_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_z_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_x_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_y_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_z_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "b_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "b_iso_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "set_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "occupancy_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_phasing_MR": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "method_rotation": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "d_res_high_rotation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low_rotation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "sigma_F_rotation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "sigma_I_rotation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reflns_percent_rotation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "method_translation": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "d_res_high_translation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low_translation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "sigma_F_translation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "sigma_I_translation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reflns_percent_translation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_coeff_Io_to_Ic": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_coeff_Fo_to_Fc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_rigid_body": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "packing": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "model_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "native_set_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "d_res_high_fit": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_low_fit": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "zscore_rotation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "LL_gain_rotation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "zscore_translation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "LL_gain_translation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_refine_component": {
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "B_iso": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_iso_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_iso_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "shift": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "shift_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "shift_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "real_space_R": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "real_space_R_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "real_space_R_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "connect": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_index": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_index_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_index_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_ratio": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_ratio_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_ratio_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_entity_prod_protocol": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "protocol": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "protocol_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "selection",
                "PCR",
                "cloning",
                "expression",
                "growth",
                "purification",
                "NMR",
                "other",
            ],
        },
    },
    "pdbx_entity_src_gen_prod_other": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "next_step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_construct_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "robot_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "process_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_prod_other_parameter": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "parameter": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "value": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_prod_pcr": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "next_step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_construct_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "robot_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "forward_primer_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "reverse_primer_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "reaction_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "purification_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "summary": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_prod_digest": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "next_step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_construct_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "robot_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "restriction_enzyme_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "restriction_enzyme_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "purification_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "summary": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_clone": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "next_step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_construct_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "robot_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "gene_insert_method": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["L", "R"],
        },
        "vector_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "vector_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "transformation_method": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["H", "E", "C"],
        },
        "marker": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["A", "F"],
        },
        "verification_method": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["P", "R", "D"],
        },
        "purification_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "summary": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_clone_ligation": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "cleavage_enzymes": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ligation_enzymes": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "time": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_clone_recombination": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "system": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["G", "I", "N"],
        },
        "recombination_enzymes": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["B", "L", "T", "C", "I"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_express": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "next_step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_construct_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "robot_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "promoter_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "plasmid_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "vector_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "N_terminal_seq_tag": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "C_terminal_seq_tag": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_scientific_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_common_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_variant": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_strain": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_tissue": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_culture_collection": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_cell_line": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_tax_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "culture_base_media": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "culture_additives": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "culture_volume": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "culture_time": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "culture_temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "inducer": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "inducer_concentration": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "induction_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "multiplicity_of_infection": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "induction_timepoint": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "induction_temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "harvesting_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "storage_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "summary": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_express_timepoint": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "serial": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "OD": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "time": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_entity_src_gen_lysis": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "next_step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_construct_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "robot_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "method": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["S", "D", "B"],
        },
        "buffer_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "buffer_volume": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "time": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_refold": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "next_step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_construct_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "robot_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "denature_buffer_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "refold_buffer_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "time": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "storage_buffer_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_proteolysis": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "next_step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_construct_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "robot_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "protease": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "protein_protease_ratio": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cleavage_buffer_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "cleavage_temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cleavage_time": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_chrom": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "next_step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_construct_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "robot_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "column_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "column_volume": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "column_temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "equilibration_buffer_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "flow_rate": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "elution_buffer_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "elution_protocol": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sample_prep_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sample_volume": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "sample_concentration": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "sample_conc_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "volume_pooled_fractions": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "yield_pooled_fractions": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "yield_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "post_treatment": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_fract": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "next_step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_construct_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "robot_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "method": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["C", "M", "P"],
        },
        "temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "protein_location": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["S", "P", "B", "M", "A", "L"],
        },
        "protein_volume": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "protein_yield": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "protein_yield_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_pure": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "product_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "conc_device_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "conc_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "conc_assay_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "protein_concentration": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "protein_yield": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "protein_purity": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "protein_oligomeric_state": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "storage_buffer_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "storage_temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "summary": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_src_gen_character": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "step_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "robot_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "result": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_construct": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "organisation": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "robot_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "class": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["plasmid", "protein", "insert", "primer", "transcript"],
        },
        "type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["DNA", "RNA", "cDNA", "mRNA", "tRNA", "protein"],
        },
        "seq": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_construct_feature": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "construct_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "start_seq": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_seq": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_robot_system": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "model": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "manufacturer": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_buffer": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_buffer_components": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "buffer_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "volume": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "conc": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "conc_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["%", "mM", "mg/mL", "M", "g/L"],
        },
        "isotopic_labeling": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_domain": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_domain_range": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "beg_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "domain_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_sequence_range": {
        "beg_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "beg_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_range_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_feature_entry": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "feature_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["value", "uri"],
        },
        "feature": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_identifier": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_assigned_by": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "feature_software_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_feature_domain": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "domain_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "feature_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["value", "uri"],
        },
        "feature": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_identifier": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_assigned_by": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "feature_software_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_feature_sequence_range": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_range_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "feature_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["value", "uri"],
        },
        "feature": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_identifier": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_assigned_by": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "feature_software_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_feature_assembly": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "assembly_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["value", "uri"],
        },
        "feature": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_identifier": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_assigned_by": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "feature_software_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_feature_monomer": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "feature_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["value", "uri"],
        },
        "feature": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_identifier": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_assigned_by": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "feature_software_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_exptl_pd": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "spec_preparation_pH": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "spec_preparation_pH_range": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "spec_preparation": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_reflns_twin": {
        "diffrn_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "crystal_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "domain_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "merohedral",
                "hemihedral",
                "non-merohedral",
                "pseudo-merohedral",
                "epitaxial",
                "tetartohedral",
            ],
        },
        "operator": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "fraction": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_I2_over_mean_I_square": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_F_square_over_mean_F2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_struct_info": {
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "nonpolymer_zero_occupancy_flag",
                "polymer_zero_occupancy_flag",
                "multiple_model_flag",
                "multiple_model_details",
                "nonpolymer_details",
                "missing atoms in alternate conformations",
            ],
        },
        "value": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_re_refinement": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_struct_assembly_prop": {
        "biol_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["ABSA (A^2)", "SSA (A^2)", "MORE"],
        },
        "value": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "entry": {
        "pdbx_DOI": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        }
    },
    "pdbx_struct_ref_seq_feature": {
        "feature_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "align_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["deletion", "expression tag", "variant", "other"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdb_strand_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_auth_mon_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_auth_mon_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_pdb_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_pdb_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_struct_ref_seq_feature_prop": {
        "feature_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "property_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "value": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "beg_db_mon_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_db_mon_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_db_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_db_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_struct_chem_comp_diagnostics": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "MISSING_ATOM",
                "STEREOCHEMISTRY",
                "VALENCE",
                "GEOMETRY",
                "LABELING",
                "OTHER",
            ],
        },
        "pdb_strand_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_chem_comp_synonyms": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "provenance": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["AUTHOR", "DRUGBANK", "CHEBI", "CHEMBL", "PDB", "PUBCHEM"],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_feature": {
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "CARBOHYDRATE ANOMER",
                "CARBOHYDRATE ISOMER",
                "CARBOHYDRATE RING",
                "CARBOHYDRATE PRIMARY CARBONYL GROUP",
            ],
        },
        "support": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "value": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "source": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_coordinate_model": {
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["CA ATOMS ONLY", "P ATOMS ONLY"],
        },
    },
    "pdbx_struct_chem_comp_feature": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["SECONDARY STRUCTURE", "STEREOCHEMISTRY", "GEOMETRY", "OTHER"],
        },
        "pdb_strand_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_diffrn_reflns_shell": {
        "diffrn_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "percent_possible_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Rmerge_I_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Rsym_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chi_squared": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "redundancy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rejects": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number_obs": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_bond_distance_limits": {
        "atom_type_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_type_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "lower_limit": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "upper_limit": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_soln_scatter": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["x-ray", "neutron", "modelling"],
        },
        "source_beamline": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "source_beamline_instrument": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "detector_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "detector_specific": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "source_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "source_class": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "num_time_frames": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "sample_pH": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "concentration_range": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "buffer_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "mean_guiner_radius": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_guiner_radius_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "min_mean_cross_sectional_radii_gyration": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "min_mean_cross_sectional_radii_gyration_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "max_mean_cross_sectional_radii_gyration": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "max_mean_cross_sectional_radii_gyration_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "protein_length": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "data_reduction_software_list": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "data_analysis_software_list": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_soln_scatter_model": {
        "scatter_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "software_list": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "software_author_list": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entry_fitting_list": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "num_conformers_calculated": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "num_conformers_submitted": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "representative_conformer": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "conformer_selection_criteria": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_descriptor": {
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "descriptor": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "SMILES_CANNONICAL",
                "SMILES_CANONICAL",
                "SMILES",
                "InChI",
                "InChI_MAIN",
                "InChI_MAIN_FORMULA",
                "InChI_MAIN_CONNECT",
                "InChI_MAIN_HATOM",
                "InChI_CHARGE",
                "InChI_STEREO",
                "InChI_ISOTOPE",
                "InChI_FIXEDH",
                "InChI_RECONNECT",
                "InChIKey",
            ],
        },
        "program": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "program_version": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_chem_comp_identifier": {
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "identifier": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "COMMON NAME",
                "SYSTEMATIC NAME",
                "CAS REGISTRY NUMBER",
                "PUBCHEM Identifier",
                "MDL Identifier",
                "SYNONYM",
                "CONDENSED IUPAC CARB SYMBOL",
                "IUPAC CARB SYMBOL",
                "SNFG CARB SYMBOL",
                "CONDENSED IUPAC CARBOHYDRATE SYMBOL",
                "IUPAC CARBOHYDRATE SYMBOL",
                "SNFG CARBOHYDRATE SYMBOL",
            ],
        },
        "program": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "program_version": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_chem_comp_import": {
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        }
    },
    "pdbx_chem_comp_atom_edit": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "edit_op": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "RENAME",
                "DELETE",
                "ADD",
                "CHARGE",
                "PARTIAL_CHARGE",
                "MODEL_CARTN_X",
                "MODEL_CARTN_Y",
                "MODEL_CARTN_Z",
                "STEREO_CONFIG",
                "AROMATIC_FLAG",
            ],
        },
        "atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "edit_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "edit_atom_value": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_bond_edit": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "edit_op": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "DELETE",
                "ADD",
                "VALUE_ORDER",
                "VALUE_DIST",
                "STEREO_CONFIG",
                "AROMATIC_FLAG",
            ],
        },
        "atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "edit_bond_value": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_audit": {
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "annotator": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "processing_site": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "action_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Create component",
                "Modify name",
                "Modify formula",
                "Modify synonyms",
                "Modify linking type",
                "Modify internal type",
                "Modify parent residue",
                "Modify processing site",
                "Modify subcomponent list",
                "Modify one letter code",
                "Modify model coordinates code",
                "Modify formal charge",
                "Modify atom id",
                "Modify charge",
                "Modify aromatic_flag",
                "Modify leaving atom flag",
                "Modify component atom id",
                "Modify component comp_id",
                "Modify value order",
                "Modify descriptor",
                "Modify identifier",
                "Modify coordinates",
                "Modify backbone",
                "Modify PCM",
                "Other modification",
                "Obsolete component",
                "Initial release",
            ],
        },
    },
    "pdbx_validate_close_contact": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "symm_as_xyz_1": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "symm_as_xyz_2": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_validate_symm_contact": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "site_symmetry_1": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "site_symmetry_2": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_validate_rmsd_bond": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "bond_deviation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "bond_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "bond_target_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "bond_standard_deviation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "linker_flag": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_validate_rmsd_angle": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_3": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "angle_deviation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_target_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_standard_deviation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "linker_flag": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_validate_torsion": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "phi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "psi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_validate_peptide_omega": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "omega": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_validate_chiral": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "omega": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_validate_planes": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "rmsd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["MAIN_CHAIN", "SIDE_CHAIN", "MAIN CHAIN", "SIDE CHAIN"],
        },
    },
    "pdbx_validate_planes_atom": {
        "plane_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_deviation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_validate_main_chain_plane": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "improper_torsion_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_struct_conn_angle": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_label_seq_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ptnr1_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "ptnr2_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr2_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr2_label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr2_label_seq_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ptnr2_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr2_auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr2_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr2_symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "ptnr1_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_auth_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr2_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr2_auth_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr3_auth_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr3_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr3_auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr3_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr3_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr3_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr3_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr3_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr3_label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr3_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr3_label_seq_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ptnr3_symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_unobs_or_zero_occ_residues": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "polymer_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "occupancy_flag": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": ["1", "0"],
        },
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_unobs_or_zero_occ_atoms": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "polymer_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "occupancy_flag": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": ["1", "0"],
        },
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_struct_assembly": {
        "method_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "oligomeric_details": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "oligomeric_count": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entry_details": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "nonpolymer_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sequence_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "compound_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "source_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "has_ligand_of_interest": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "has_protein_modification": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
    },
    "pdbx_struct_mod_residue": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "parent_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_struct_ref_seq_insertion": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_struct_ref_seq_deletion": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "db_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "db_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_remediation_atom_site_mapping": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "group_PDB": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["ATOM", "HETATM"],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdbx_align": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pre_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pre_auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pre_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pre_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pre_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pre_group_PDB": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["ATOM", "HETATM"],
        },
        "pre_auth_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pre_pdbx_align": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "occupancy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pre_occupancy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_validate_polymer_linkage": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_helical_symmetry": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "number_of_operations": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "rotation_per_n_subunits": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rise_per_n_subunits": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "n_subunits_divisor": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "dyad_axis": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "yes"],
        },
        "circular_symmetry": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "pdbx_point_symmetry": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "Schoenflies_symbol": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["I", "O", "T", "C", "D"],
        },
        "circular_symmetry": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "H-M_notation": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_struct_entity_inst": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_struct_oper_list": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "identity operation",
                "point symmetry operation",
                "helical symmetry operation",
                "crystal symmetry operation",
                "3D crystal symmetry operation",
                "2D crystal symmetry operation",
                "transform to point frame",
                "transform to helical frame",
                "transform to crystal frame",
                "transform to 2D crystal frame",
                "transform to 3D crystal frame",
                "build point asymmetric unit",
                "build helical asymmetric unit",
                "build 2D crystal asymmetric unit",
                "build 3D crystal asymmetric unit",
            ],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "symmetry_operation": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "matrix[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "full_matrix": {
            "data_type": "3x4_matrix",
            "regex": "((([ \\t]*-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)? +){3})?(-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)? *\\n([\\t ]*\\n)*)){2}((([ \\t]*-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)? +){3})(-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)? *\\n?([\\t ]*\\n)*))[ \\t]*",
            "options": [],
        },
    },
    "pdbx_struct_assembly_gen": {
        "entity_inst_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "asym_id_list": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id_list": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "assembly_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "oper_expression": {
            "data_type": "operation_expression",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_struct_asym_gen": {
        "entity_inst_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "oper_expression": {
            "data_type": "operation_expression",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_struct_msym_gen": {
        "entity_inst_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "msym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "oper_expression": {
            "data_type": "operation_expression",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_struct_legacy_oper_list": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "matrix[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_chem_comp_atom_feature": {
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_type": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["CT", "NT", "5PT", "3PT", "CPA", "CNA"],
        },
    },
    "pdbx_reference_molecule_family": {
        "family_prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "release_status": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["REL", "HOLD", "OBS", "WAIT"],
        },
        "replaces": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "replaced_by": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_reference_molecule_list": {
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "family_prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_reference_molecule": {
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "formula_weight": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "formula": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Amino acid",
                "Aminoglycoside",
                "Anthracycline",
                "Anthraquinone",
                "Ansamycin",
                "Chalkophore",
                "Chromophore",
                "Glycopeptide",
                "Cyclic depsipeptide",
                "Cyclic lipopeptide",
                "Cyclic peptide",
                "Heterocyclic",
                "Imino sugar",
                "Keto acid",
                "Lipoglycopeptide",
                "Lipopeptide",
                "Macrolide",
                "Non-polymer",
                "Nucleoside",
                "Oligopeptide",
                "Oligosaccharide",
                "Peptaibol",
                "Peptide-like",
                "Polycyclic",
                "Polypeptide",
                "Polysaccharide",
                "Quinolone",
                "Thiolactone",
                "Thiopeptide",
                "Siderophore",
                "Unknown",
                "Chalkophore, Polypeptide",
            ],
        },
        "type_evidence_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "class": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Antagonist",
                "Antibiotic",
                "Anticancer",
                "Anticoagulant",
                "Antifungal",
                "Antigen",
                "Antiinflammatory",
                "Antimicrobial",
                "Antineoplastic",
                "Antiparasitic",
                "Antiretroviral",
                "Anthelmintic",
                "Antithrombotic",
                "Antitumor",
                "Antiviral",
                "CASPASE inhibitor",
                "Chaperone binding",
                "Enzyme inhibitor",
                "Drug delivery",
                "Glycan component",
                "Growth factor",
                "Immunosuppressant",
                "Inducer",
                "Inhibitor",
                "Lantibiotic",
                "Metabolism",
                "Metal transport",
                "Nutrient",
                "Oxidation-reduction",
                "Protein binding",
                "Receptor",
                "Substrate analog",
                "Synthetic opioid",
                "Thrombin inhibitor",
                "Transition state mimetic",
                "Transport activator",
                "Trypsin inhibitor",
                "Toxin",
                "Unknown",
                "Water retention",
                "Anticoagulant, Antithrombotic",
                "Antibiotic, Antimicrobial",
                "Antibiotic, Anthelmintic",
                "Antibiotic, Antineoplastic",
                "Antimicrobial, Antiretroviral",
                "Antimicrobial, Antitumor",
                "Antimicrobial, Antiparasitic, Antibiotic",
                "Thrombin inhibitor, Trypsin inhibitor",
            ],
        },
        "class_evidence_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "represent_as": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["polymer", "single molecule", "branched"],
        },
        "chem_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "compound_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "representative_PDB_id_code": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "release_status": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["REL", "HOLD", "OBS", "WAIT"],
        },
        "replaces": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "replaced_by": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_reference_entity_list": {
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ref_entity_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["polymer", "polymer-like", "non-polymer", "branched"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "component_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_reference_entity_nonpoly": {
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ref_entity_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "chem_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_reference_entity_link": {
        "link_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ref_entity_id_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ref_entity_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_seq_num_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "entity_seq_num_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "value_order": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sing", "doub", "trip", "quad", "arom", "poly", "delo", "pi"],
        },
        "component_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "component_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "nonpoly_res_num_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "nonpoly_res_num_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "link_class": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["PP", "PN", "NP", "NN"],
        },
    },
    "pdbx_reference_entity_poly_link": {
        "link_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ref_entity_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "component_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "entity_seq_num_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "entity_seq_num_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "insert_code_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "insert_code_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "value_order": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sing", "doub", "trip", "quad", "arom", "poly", "delo", "pi"],
        },
    },
    "pdbx_reference_entity_poly": {
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ref_entity_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "peptide-like",
                "nucleic-acid-like",
                "polysaccharide-like",
                "oligosaccharide",
            ],
        },
        "db_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_reference_entity_poly_seq": {
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ref_entity_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "mon_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "parent_mon_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "observed": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "hetero": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
    },
    "pdbx_reference_entity_sequence": {
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ref_entity_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["peptide-like", "saccharide"],
        },
        "NRP_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "one_letter_codes": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_reference_entity_src_nat": {
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ref_entity_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "organism_scientific": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "strain": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "taxid": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atcc": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "source": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "source_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_reference_molecule_details": {
        "family_prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "source": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "source_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_reference_molecule_synonyms": {
        "family_prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "source": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "chem_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_reference_entity_subcomponents": {
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "chem_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_reference_molecule_annotation": {
        "family_prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "support": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "source": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "chem_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_reference_molecule_features": {
        "family_prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "source_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "value": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "source": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "chem_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_reference_molecule_related_structures": {
        "family_prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "db_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_accession": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "formula": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_struct_group_list": {
        "struct_group_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Molecular Complex",
                "Heterogen Complex",
                "TLS group",
                "NCS group",
            ],
        },
        "group_enumeration_type": {
            "data_type": "ucode-alphanum-csv",
            "regex": "[A-Za-z0-9]+(,[A-Za-z0-9]+)?",
            "options": ["atom", "component", "component_range"],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "selection": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "selection_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_struct_group_components": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "struct_group_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_struct_group_component_range": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "struct_group_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "beg_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "beg_label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "beg_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_prd_audit": {
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "annotator": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "processing_site": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["RCSB", "PDBE", "PDBJ", "BMRB", "PDBC"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "action_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Initial release",
                "Create molecule",
                "Modify type",
                "Modify class",
                "Modify molecule name",
                "Modify representation",
                "Modify sequence",
                "Modify linkage",
                "Modify taxonomy organism",
                "Modify audit",
                "Other modification",
                "Obsolete molecule",
            ],
        },
    },
    "pdbx_family_prd_audit": {
        "family_prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "annotator": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "processing_site": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "action_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Initial release",
                "Create family",
                "Add PRD",
                "Remove PRD",
                "Modify family name",
                "Modify synonyms",
                "Modify annotation",
                "Modify family classification",
                "Modify feature",
                "Modify related structures",
                "Modify molecule details",
                "Modify citation",
                "Other modification",
                "Obsolete family",
                "Create family",
                "Modify sequence",
                "Other modification",
                "Obsolete familyt",
            ],
        },
    },
    "pdbx_molecule": {
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "instance_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "linked_entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_molecule_features": {
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "class": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Antagonist",
                "Antibiotic",
                "Anticancer",
                "Anticoagulant",
                "Antifungal",
                "Antigen",
                "Antiinflammatory",
                "Antimicrobial",
                "Antineoplastic",
                "Antiparasitic",
                "Antiretroviral",
                "Anthelmintic",
                "Antithrombotic",
                "Antitumor",
                "Antiviral",
                "CASPASE inhibitor",
                "Chaperone binding",
                "Enzyme inhibitor",
                "Drug delivery",
                "Glycan component",
                "Growth factor",
                "Immunosuppressant",
                "Inducer",
                "Inhibitor",
                "Lantibiotic",
                "Metabolism",
                "Metal transport",
                "Nutrient",
                "Oxidation-reduction",
                "Protein binding",
                "Receptor",
                "Substrate analog",
                "Synthetic opioid",
                "Thrombin inhibitor",
                "Transition state mimetic",
                "Transport activator",
                "Trypsin inhibitor",
                "Toxin",
                "Unknown",
                "Water retention",
                "Anticoagulant, Antithrombotic",
                "Antibiotic, Antimicrobial",
                "Antibiotic, Anthelmintic",
                "Antibiotic, Antineoplastic",
                "Antimicrobial, Antiretroviral",
                "Antimicrobial, Antitumor",
                "Antimicrobial, Antiparasitic, Antibiotic",
                "Thrombin inhibitor, Trypsin inhibitor",
            ],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Amino acid",
                "Aminoglycoside",
                "Anthracycline",
                "Anthraquinone",
                "Ansamycin",
                "Chalkophore",
                "Chromophore",
                "Glycopeptide",
                "Cyclic depsipeptide",
                "Cyclic lipopeptide",
                "Cyclic peptide",
                "Heterocyclic",
                "Imino sugar",
                "Keto acid",
                "Lipoglycopeptide",
                "Lipopeptide",
                "Macrolide",
                "Non-polymer",
                "Nucleoside",
                "Oligopeptide",
                "Oligosaccharide",
                "Peptaibol",
                "Peptide-like",
                "Polycyclic",
                "Polypeptide",
                "Polysaccharide",
                "Quinolone",
                "Thiolactone",
                "Thiopeptide",
                "Siderophore",
                "Unknown",
                "Chalkophore, Polypeptide",
            ],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_family_group_index": {
        "id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "family_prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_distant_solvent_atoms": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "neighbor_macromolecule_distance": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "neighbor_ligand_distance": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_struct_special_symmetry": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_model_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_reference_publication_list": {
        "publication_abbrev": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ASTM_code_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ASTM_code_value": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ISSN_code_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ISSN_code_value": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "country": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "start_year": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "end_year": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_nmr_assigned_chem_shift_list": {
        "chem_shift_13C_err": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chem_shift_15N_err": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chem_shift_19F_err": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chem_shift_1H_err": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chem_shift_2H_err": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chem_shift_31P_err": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chem_shift_reference_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "conditions_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "data_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "error_derivation_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "conditions_label": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_nmr_chem_shift_experiment": {
        "assigned_chem_shift_list_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "experiment_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "experiment_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sample_state": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["isotropic", "anisotropic"],
        },
        "solution_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_nmr_chem_shift_ref": {
        "atom_group": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "carbonyl carbon",
                "fluorine",
                "methyl carbon",
                "methyl carbons",
                "methyl protons",
                "methylene carbons",
                "methylene protons",
                "nitrogen",
                "protons",
                "phosphorus",
            ],
        },
        "atom_isotope_number": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "atom_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "chem_shift_reference_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "chem_shift_units": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["ppm", "Hz"],
        },
        "chem_shift_val": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correction_val": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "external_ref_axis": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["parallel", "perpendicular"],
        },
        "external_ref_loc": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "insert at center of experimental sample tube",
                "insert at outer edge of experimental sample tube",
                "insert at center of a separate sample tube",
                "insert at outer edge of a separate sample tube",
                "separate tube (no insert) similar to the experimental sample tube",
                "separate tube (no insert) not similar to the experimental sample tube",
                "other",
            ],
        },
        "external_ref_sample_geometry": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["cylindrical", "spherical", "other"],
        },
        "indirect_shift_ratio": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mol_common_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "DSS",
                "DSA",
                "TSP",
                "TMSP",
                "water",
                "DMSO",
                "DMSO-d5",
                "DMSO-d6",
                "methanol",
                "TMS",
                "methionine",
                "acetonitrile",
                "alanine",
                "acetate",
                "glucose",
                "dioxane",
                "adamantane",
                "ammonium chloride",
                "[15N] ammonium chloride",
                "ammonium hydroxide",
                "ammonium nitrate",
                "[15N] ammonium nitrate",
                "[15N, 15N] ammonium nitrate",
                "ammonium nitrite",
                "ammonium sulfate",
                "[15N] ammonium sulfate",
                "liquid anhydrous ammonia",
                "formamide",
                "Histidine",
                "[15N] nitric acid",
                "Nitromethane",
                "[15N] nitromethane",
                "N-acetyl-valine (NAV)",
                "urea",
                "phosphoric acid",
                "phosphoric acid (85%)",
                "TMP",
                "cadmium perchlorate",
                "Deuterium Oxide",
                "TFA",
                "TFE",
            ],
        },
        "rank": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ref_correction_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ref_method": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["internal", "external", "na"],
        },
        "ref_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["direct", "indirect"],
        },
        "solvent": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_nmr_chem_shift_reference": {
        "carbon_shifts_flag": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["no", "yes", "yes with IUPAC referencing"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "label": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "nitrogen_shifts_flag": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["no", "yes", "yes with IUPAC referencing"],
        },
        "other_shifts_flag": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["no", "yes"],
        },
        "phosphorus_shifts_flag": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["no", "yes", "yes with IUPAC referencing"],
        },
        "proton_shifts_flag": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["no", "yes", "yes with IUPAC referencing"],
        },
    },
    "pdbx_nmr_chem_shift_software": {
        "assigned_chem_shift_list_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "software_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "software_label": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_nmr_constraint_file": {
        "constraint_filename": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "constraint_number": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "constraint_subtype": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Not applicable",
                "NOE",
                "NOE buildup",
                "NOE not seen",
                "PRE",
                "PRE solvent",
                "CSP",
                "general distance",
                "alignment tensor",
                "chirality",
                "dipolar recoupling",
                "prochirality",
                "disulfide bond",
                "hydrogen bond",
                "spin diffusion",
                "symmetry",
                "RDC",
                "ROE",
                "peptide",
                "ring",
                "J-couplings",
                "backbone chemical shifts",
                "carbon chemical shifts",
                "proton chemical shifts",
                "floating chiral stereo assignments",
                "SAXS",
                "general angle",
                "hydrogen exchange protection",
                "metal coordination",
                "mutation",
                "radius of gyration",
            ],
        },
        "constraint_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "carbohydrate dihedral angle",
                "distance",
                "dipolar coupling",
                "protein dihedral angle",
                "nucleic acid dihedral angle",
                "coupling constant",
                "chemical shift",
                "other angle",
                "chemical shift anisotropy",
                "hydrogen exchange",
                "line broadening",
                "pseudocontact shift",
                "intervector projection angle",
                "protein peptide planarity",
                "protein other kinds of constraints",
                "nucleic acid base planarity",
                "nucleic acid other kinds of constraints",
                "peak volume",
                "coordinate geometry",
            ],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "software_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "software_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_nmr_software_task": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "software_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "task": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "collection",
                "chemical shift assignment",
                "chemical shift calculation",
                "data analysis",
                "geometry optimization",
                "peak picking",
                "processing",
                "refinement",
                "structure solution",
            ],
        },
    },
    "pdbx_nmr_spectral_dim": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "atom_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_isotope_number": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "spectral_region": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "magnetization_linkage_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "sweep_width": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "encoding_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "encoded_source_dimension_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "spectral_peak_list_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "sweep_width_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Hz", "ppm"],
        },
        "center_frequency_offset": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "under_sampling_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["aliased", "folded", "not observed"],
        },
    },
    "pdbx_nmr_spectral_peak_list": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "data_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "solution_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "conditions_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "experiment_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number_of_spectral_dimensions": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "text_data_format": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "conditions_label": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_nmr_spectral_peak_software": {
        "software_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "spectral_peak_list_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "pdbx_nmr_systematic_chem_shift_offset": {
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "TROSY offset",
                "2H isotope effect",
                "13C isotope effect",
                "15N isotope effect",
                "SAIL isotope labeling",
            ],
        },
        "atom_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "amide protons",
                "amide nitrogens",
                "all nitrogen bonded protons",
                "all nitrogens",
                "all 1H",
                "all 13C",
                "all 15N",
                "all 19F",
                "all 31P",
            ],
        },
        "atom_isotope_number": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "val": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "val_err": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "assigned_chem_shift_list_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_nmr_upload": {
        "data_file_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "data_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "data_file_category": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "assigned_chemical_shifts",
                "coupling_constants",
                "spectral_peak_list",
                "resonance_linker",
                "chem_shift_isotope_effect",
                "chem_shift_interaction_diff",
                "chem_shift_anisotropy",
                "theoretical_chem_shifts",
                "chem_shifts_calc_type",
                "RDCs",
                "dipolar_couplings",
                "spectral_density_values",
                "other_data_types",
                "chemical_rates",
                "H_exch_rates",
                "H_exch_protection_factors",
                "homonucl_NOEs",
                "heteronucl_NOEs",
                "heteronucl_T1_relaxation",
                "heteronucl_T1rho_relaxation",
                "heteronucl_T2_relaxation",
                "auto_relaxation",
                "dipole_dipole_relaxation",
                "dipole_dipole_cross_correlations",
                "dipole_CSA_cross_correlations",
                "order_parameters",
                "pH_titration",
                "pH_param_list",
                "D_H_fractionation_factors",
                "binding_data",
                "binding_param_list",
                "deduced_secd_struct_features",
                "deduced_hydrogen_bonds",
                "conformer_statistics",
                "constraint_statistics",
                "representative_conformer",
                "conformer_family_coord_set",
                "force_constants",
                "angular_order_parameters",
                "tertiary_struct_elements",
                "secondary_structs",
                "bond_annotation",
                "structure_interactions",
                "other_struct_features",
                "tensor",
                "interatomic_distance",
                "general_distance_constraints",
                "distance_constraints",
                "floating_chiral_stereo_assign",
                "torsion_angle_constraints",
                "RDC_constraints",
                "J_three_bond_constraints",
                "CA_CB_chem_shift_constraints",
                "H_chem_shift_constraints",
                "other_constraints",
            ],
        },
        "data_file_syntax": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "NMR-STAR 3.1",
                "NMR-STAR 2.1",
                "AMBER",
                "XPLOR",
                "TALOS",
                "CYANA",
            ],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_subcomponent_struct_conn": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "type": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "covale",
                "disulf",
                "hydrog",
                "metalc",
                "mismat",
                "saltbr",
                "covale_base",
                "covale_sugar",
                "covale_phosphate",
            ],
        },
        "entity_id_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "entity_id_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "comp_id_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_id_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "seq_id_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_chem_comp_subcomponent_entity_list": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "parent_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "D-peptide linking",
                "L-peptide linking",
                "D-peptide NH3 amino terminus",
                "L-peptide NH3 amino terminus",
                "D-peptide COOH carboxy terminus",
                "L-peptide COOH carboxy terminus",
                "DNA linking",
                "RNA linking",
                "L-RNA linking",
                "L-DNA linking",
                "DNA OH 5 prime terminus",
                "RNA OH 5 prime terminus",
                "DNA OH 3 prime terminus",
                "RNA OH 3 prime terminus",
                "D-saccharide 1,4 and 1,4 linking",
                "L-saccharide 1,4 and 1,4 linking",
                "D-saccharide 1,4 and 1,6 linking",
                "L-saccharide 1,4 and 1,6 linking",
                "L-saccharide",
                "D-saccharide",
                "saccharide",
                "non-polymer",
                "peptide linking",
                "peptide-like",
                "L-gamma-peptide, C-delta linking",
                "D-gamma-peptide, C-delta linking",
                "L-beta-peptide, C-gamma linking",
                "D-beta-peptide, C-gamma linking",
                "other",
            ],
        },
        "class": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["polymer", "non-polymer", "macrolide", "water"],
        },
    },
    "pdbx_entity_poly_comp_link_list": {
        "link_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_comp_num_1": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "entity_comp_num_2": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "comp_id_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "leaving_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_stereo_config_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["R", "S", "N"],
        },
        "atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "leaving_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_stereo_config_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["R", "S", "N"],
        },
        "value_order": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sing", "doub", "trip", "quad", "arom", "poly", "delo", "pi"],
        },
    },
    "pdbx_linked_entity": {
        "linked_entity_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "class": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "prd_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_linked_entity_instance_list": {
        "linked_entity_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "instance_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_linked_entity_list": {
        "linked_entity_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "component_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_linked_entity_link_list": {
        "link_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "linked_entity_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_seq_num_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "entity_seq_num_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "value_order": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sing", "doub", "trip", "quad", "arom", "poly", "delo", "pi"],
        },
        "component_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "component_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "link_class": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["PP", "PN", "NP", "NN"],
        },
    },
    "pdbx_entity_branch_descriptor": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "descriptor": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "LINUCS",
                "Glycam Condensed Sequence",
                "Glycam Condensed Core Sequence",
                "WURCS",
            ],
        },
        "program": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "program_version": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_reference_linked_entity": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "class": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "taxonomy_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "taxonomy_class": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "link_to_entity_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "polypeptide",
                "polydeoxyribonucleotide",
                "polyribonucleotide",
                "polysaccharide",
                "lipid",
                "General-Glycoside",
                "other",
            ],
        },
        "link_to_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "link_from_entity_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "polypeptide(D)",
                "polypeptide(L)",
                "polydeoxyribonucleotide",
                "polyribonucleotide",
                "polysaccharide(D)",
                "polysaccharide(L)",
                "polydeoxyribonucleotide/polyribonucleotide hybrid",
                "cyclic-pseudo-peptide",
                "other",
            ],
        },
    },
    "pdbx_reference_linked_entity_comp_list": {
        "linked_entity_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "list_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_reference_linked_entity_comp_link": {
        "linked_entity_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "link_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "list_id_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "list_id_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "leaving_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_stereo_config_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["R", "S", "N"],
        },
        "leaving_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_stereo_config_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["R", "S", "N"],
        },
        "value_order": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sing", "doub", "trip", "quad", "arom", "poly", "delo", "pi"],
        },
    },
    "pdbx_reference_linked_entity_link": {
        "linked_entity_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "link_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "from_list_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "to_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "from_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "to_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "from_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "from_leaving_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "from_atom_stereo_config": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["R", "S", "N"],
        },
        "value_order": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sing", "doub", "trip", "quad", "arom", "poly", "delo", "pi"],
        },
    },
    "pdbx_related_exp_data_set": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "data_reference": {
            "data_type": "exp_data_doi",
            "regex": "10\\.[0-9]{4,9}/[-._;()/:A-Za-z0-9]+",
            "options": [],
        },
        "metadata_reference": {
            "data_type": "exp_data_doi",
            "regex": "10\\.[0-9]{4,9}/[-._;()/:A-Za-z0-9]+",
            "options": [],
        },
        "data_set_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_database_status_history": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ordinal": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "date_begin": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_end": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "status_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "PROC",
                "WAIT",
                "REL",
                "HOLD",
                "HPUB",
                "AUTH",
                "POLC",
                "REPL",
                "AUCO",
            ],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_assembly": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "num_components": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "em_entity_assembly": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "parent_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "source": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["NATURAL", "RECOMBINANT", "MULTIPLE SOURCES", "SYNTHETIC"],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "go_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ipr_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "synonym": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number_of_copies": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "oligomeric_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id_list": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ebi_organism_scientific": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ebi_organism_common": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ebi_strain": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ebi_tissue": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ebi_cell": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ebi_organelle": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ebi_cellular_location": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ebi_engineered": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["YES", "NO"],
        },
        "ebi_expression_system": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ebi_expression_system_plasmid": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "mutant_flag": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["YES", "NO"],
        },
        "chimera": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["YES", "NO"],
        },
    },
    "em_virus_entity": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "virus_host_category": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "virus_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "VIRION",
                "SATELLITE",
                "PRION",
                "VIROID",
                "VIRUS-LIKE PARTICLE",
            ],
        },
        "virus_isolate": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "STRAIN",
                "SEROTYPE",
                "SEROCOMPLEX",
                "SUBSPECIES",
                "SPECIES",
                "OTHER",
            ],
        },
        "entity_assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "enveloped": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["YES", "NO"],
        },
        "empty": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["YES", "NO"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_sample_preparation": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "buffer_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "2d_crystal_grow_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "support_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_sample_support": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "film_material": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "CARBON",
                "FORMVAR PLUS CARBON",
                "CELLULOSE ACETATE PLUS CARBON",
                "PARLODION PLUS CARBON",
                "HOLEY CARBON",
                "SILICON DIOXIDE",
            ],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "grid_material": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "COPPER",
                "COPPER/PALLADIUM",
                "COPPER/RHODIUM",
                "GOLD",
                "GRAPHENE OXIDE",
                "NICKEL",
                "NICKEL/TITANIUM",
                "PLATINUM",
                "SILICON NITRIDE",
                "TUNGSTEN",
                "TITANIUM",
                "MOLYBDENUM",
            ],
        },
        "grid_mesh_size": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "grid_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pretreatment": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_buffer": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pH": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "em_vitrification": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "sample_preparation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "cryogen_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "HELIUM",
                "NITROGEN",
                "PROPANE",
                "ETHANE",
                "ETHANE-PROPANE",
                "METHANE",
                "FREON 22",
                "FREON 12",
                "OTHER",
            ],
        },
        "humidity": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "temp": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chamber_temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "instrument": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "CRYOSOL VITROJET",
                "EMS-002 RAPID IMMERSION FREEZER",
                "FEI VITROBOT MARK I",
                "FEI VITROBOT MARK II",
                "FEI VITROBOT MARK III",
                "FEI VITROBOT MARK IV",
                "GATAN CRYOPLUNGE 3",
                "HOMEMADE PLUNGER",
                "LEICA PLUNGER",
                "LEICA EM GP",
                "LEICA EM CPC",
                "LEICA KF80",
                "REICHERT-JUNG PLUNGER",
                "SPOTITON",
                "SPT LABTECH CHAMELEON",
                "ZEISS PLUNGE FREEZER CRYOBOX",
            ],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "time_resolved_state": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_imaging": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "astigmatism": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "electron_beam_tilt_params": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "residual_tilt": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "sample_support_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "detector_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "scans_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "microscope_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "microscope_model": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "FEI MORGAGNI",
                "FEI POLARA 300",
                "FEI TALOS ARCTICA",
                "FEI TECNAI 10",
                "FEI TECNAI 12",
                "FEI TECNAI 20",
                "FEI TECNAI F20",
                "FEI TECNAI F30",
                "FEI TECNAI ARCTICA",
                "FEI TECNAI SPHERA",
                "FEI TECNAI SPIRIT",
                "FEI TITAN",
                "FEI TITAN KRIOS",
                "FEI/PHILIPS CM10",
                "FEI/PHILIPS CM12",
                "FEI/PHILIPS CM120T",
                "FEI/PHILIPS CM200FEG",
                "FEI/PHILIPS CM200FEG/SOPHIE",
                "FEI/PHILIPS CM200FEG/ST",
                "FEI/PHILIPS CM200FEG/UT",
                "FEI/PHILIPS CM200T",
                "FEI/PHILIPS CM300FEG/HE",
                "FEI/PHILIPS CM300FEG/ST",
                "FEI/PHILIPS CM300FEG/T",
                "FEI/PHILIPS EM400",
                "FEI/PHILIPS EM420",
                "HITACHI EF2000",
                "HITACHI EF3000",
                "HITACHI H7600",
                "HITACHI HF2000",
                "HITACHI HF3000",
                "HITACHI H3000 UHVEM",
                "HITACHI H-9500SD",
                "JEOL 100B",
                "JEOL 100CX",
                "JEOL 1000EES",
                "JEOL 1010",
                "JEOL 1200",
                "JEOL 1200EX",
                "JEOL 1200EXII",
                "JEOL 1230",
                "JEOL 1400",
                "JEOL 1400/HR + YPS FEG",
                "JEOL 2000EX",
                "JEOL 2000EXII",
                "JEOL 2010",
                "JEOL 2010F",
                "JEOL 2010HT",
                "JEOL 2010HC",
                "JEOL 2010UHR",
                "JEOL 2011",
                "JEOL 2100",
                "JEOL 2100F",
                "JEOL 2200FS",
                "JEOL 2200FSC",
                "JEOL 3000SFF",
                "JEOL 3100FEF",
                "JEOL 3100FFC",
                "JEOL 3200FS",
                "JEOL 3200FSC",
                "JEOL KYOTO-3000SFF",
                "JEOL 3200FSC",
                "JEOL 4000",
                "JEOL 4000EX",
                "JEOL CRYO ARM 200",
                "JEOL CRYO ARM 300",
                "SIEMENS SULEIKA",
                "TFS GLACIOS",
                "TFS KRIOS",
                "TFS TALOS",
                "TFS TALOS F200C",
                "TFS TALOS L120C",
                "TFS TITAN THEMIS",
                "TFS TUNDRA",
                "ZEISS LEO912",
                "ZEISS LIBRA120PLUS",
            ],
        },
        "specimen_holder_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "specimen_holder_model": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "FEI TITAN KRIOS AUTOGRID HOLDER",
                "FISCHIONE 2550",
                "FISCHIONE INSTRUMENTS DUAL AXIS TOMOGRAPHY HOLDER",
                "GATAN 626 SINGLE TILT LIQUID NITROGEN CRYO TRANSFER HOLDER",
                "GATAN 910 MULTI-SPECIMEN SINGLE TILT CRYO TRANSFER HOLDER",
                "GATAN 914 HIGH TILT LIQUID NITROGEN CRYO TRANSFER TOMOGRAPHY HOLDER",
                "GATAN 915 DOUBLE TILT LIQUID NITROGEN CRYO TRANSFER HOLDER",
                "GATAN CHDT 3504 DOUBLE TILT HIGH RESOLUTION NITROGEN COOLING HOLDER",
                "GATAN CT3500 SINGLE TILT LIQUID NITROGEN CRYO TRANSFER HOLDER",
                "GATAN CT3500TR SINGLE TILT ROTATION LIQUID NITROGEN CRYO TRANSFER HOLDER",
                "GATAN ELSA 698 SINGLE TILT LIQUID NITROGEN CRYO TRANSFER HOLDER",
                "GATAN HC 3500 SINGLE TILT HEATING/NITROGEN COOLING HOLDER",
                "GATAN HCHDT 3010 DOUBLE TILT HIGH RESOLUTION HELIUM COOLING HOLDER",
                "GATAN HCHST 3008 SINGLE TILT HIGH RESOLUTION HELIUM COOLING HOLDER",
                "GATAN HELIUM",
                "GATAN LIQUID NITROGEN",
                "GATAN UHRST 3500 SINGLE TILT ULTRA HIGH RESOLUTION NITROGEN COOLING HOLDER",
                "GATAN ULTDT ULTRA LOW TEMPERATURE DOUBLE TILT HELIUM COOLING HOLDER",
                "GATAN ULTST ULTRA LOW TEMPERATURE SINGLE TILT HELIUM COOLING HOLDER",
                "HOME BUILD",
                "JEOL",
                "JEOL CRYOSPECPORTER",
                "JEOL 3200FSC CRYOHOLDER",
                "PHILIPS ROTATION HOLDER",
                "SIDE ENTRY, EUCENTRIC",
                "OTHER",
            ],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "accelerating_voltage": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "illumination_mode": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["FLOOD BEAM", "SPOT SCAN", "OTHER"],
        },
        "mode": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "4D-STEM",
                "BRIGHT FIELD",
                "DARK FIELD",
                "DIFFRACTION",
                "OTHER",
            ],
        },
        "nominal_cs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "nominal_defocus_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "nominal_defocus_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "calibrated_defocus_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "calibrated_defocus_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "tilt_angle_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "tilt_angle_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "nominal_magnification": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "calibrated_magnification": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "electron_source": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "detector_distance": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "recording_temperature_minimum": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "recording_temperature_maximum": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "alignment_procedure": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["NONE", "BASIC", "ZEMLIN TABLEAU", "COMA FREE", "OTHER"],
        },
        "c2_aperture_diameter": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "cryogen": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["NITROGEN", "HELIUM"],
        },
        "objective_aperture": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "microscope_serial_number": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "microscope_version": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_detector": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "detective_quantum_efficiency": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mode": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["COUNTING", "INTEGRATING", "SUPER-RESOLUTION", "OTHER"],
        },
    },
    "em_image_scans": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "number_digital_images": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "scanner_model": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "ZEISS SCAI",
                "EMIL 10",
                "OPTRONICS",
                "PERKIN ELMER",
                "TEMSCAN",
                "EIKONIX IEEE 488",
                "NIKON COOLSCAN",
                "NIKON SUPER COOLSCAN 9000",
                "IMAGE SCIENCE PATCHWORK DENSITOMETER",
                "PRIMESCAN",
                "OTHER",
            ],
        },
        "sampling_size": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "od_range": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "quant_bit_size": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "dimension_height": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "dimension_width": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "frames_per_image": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "image_recording_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "used_frames_per_image": {
            "data_type": "int-range",
            "regex": "[+-]?[0-9]+-[+-]?[0-9]+",
            "options": [],
        },
    },
    "em_2d_projection_selection": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_3d_reconstruction": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "algorithm": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "citation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "resolution": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "resolution_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "magnification_calibration": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "nominal_pixel_size": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "actual_pixel_size": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "num_particles": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "euler_angles_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "num_class_averages": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "fsc_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "EVEN/ODD MAPS REFINED TOTALLY INDEPENDENT (GOLD STANDARD)",
                "EVEN/ODD MAPS REFINED AGAINST THE SAME MODEL (SEMI-INDEPENDENT)",
            ],
        },
        "refinement_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "HALF-MAPS REFINED AGAINST SAME DATA",
                "HALF-MAPS REFINED INDEPENDENTLY",
                "HALF-MAPS REFINED WITH FREQUENCY RANGE OMITTED",
                "HALF-MAPS REFINED INDEPENDENTLY WITH FREQUENCY RANGE OMITTED",
                "OTHER",
            ],
        },
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "symmetry_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["POINT", "HELICAL", "2D CRYSTAL", "3D CRYSTAL"],
        },
    },
    "em_3d_fitting": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "method": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "target_criteria": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "overall_b_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ref_space": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["REAL", "RECIPROCAL"],
        },
        "ref_protocol": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "RIGID BODY FIT",
                "FLEXIBLE FIT",
                "BACKBONE TRACE",
                "AB INITIO MODEL",
                "OTHER",
            ],
        },
    },
    "em_3d_fitting_list": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "3d_fitting_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_entry_id": {
            "data_type": "pdb_id_u",
            "regex": "([1-9][A-Za-z0-9]{3}|[Pp][Dd][Bb]_[A-Za-z0-9]{8})",
            "options": [],
        },
        "pdb_chain_id": {
            "data_type": "asym_id",
            "regex": "[A-Za-z0-9]+",
            "options": [],
        },
        "pdb_chain_residue_range": {
            "data_type": "int-range",
            "regex": "[+-]?[0-9]+-[+-]?[0-9]+",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "chain_id": {"data_type": "asym_id", "regex": "[A-Za-z0-9]+", "options": []},
        "chain_residue_range": {
            "data_type": "int-range",
            "regex": "[+-]?[0-9]+-[+-]?[0-9]+",
            "options": [],
        },
        "source_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "PDB",
                "AlphaFold",
                "RoseTTAFold",
                "ModelArchive",
                "SwissModel",
                "Modeller",
                "ITasser",
                "Other",
            ],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "in silico model",
                "experimental model",
                "integrative model",
                "other",
            ],
        },
        "accession_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "initial_refinement_model_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "em_helical_entity": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "axial_symmetry": {
            "data_type": "point_group_helical",
            "regex": "[CD][1-9][0-9]*",
            "options": [],
        },
        "angular_rotation_per_subunit": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "axial_rise_per_subunit": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "em_experiment": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "reconstruction_method": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "SINGLE PARTICLE",
                "HELICAL",
                "CRYSTALLOGRAPHY",
                "SUBTOMOGRAM AVERAGING",
                "TOMOGRAPHY",
            ],
        },
        "aggregation_state": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "2D ARRAY",
                "3D ARRAY",
                "HELICAL ARRAY",
                "FILAMENT",
                "PARTICLE",
                "TISSUE",
                "CELL",
            ],
        },
        "entity_assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_single_particle_entity": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "point_symmetry": {
            "data_type": "point_group",
            "regex": "(C[1-9][0-9]*|D[2-9]|D[1-9][0-9]+|O|T|I)",
            "options": [],
        },
    },
    "em_admin": {
        "current_status": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "PROC",
                "WAIT",
                "AUTH",
                "REUP",
                "REPL",
                "AUXU",
                "AUXS",
                "AUCO",
                "REFI",
                "POLC",
                "HPUB",
                "HOLD",
                "HOLD8W",
                "REL",
                "WDRN",
                "OBS",
            ],
        },
        "deposition_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "deposition_site": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["PDBE", "RCSB", "PDBJ", "PDBC"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "last_update": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "map_release_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "map_hold_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "header_release_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "obsoleted_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "replace_existing_entry_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["YES", "NO"],
        },
        "title": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "process_site": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["RCSB", "PDBE", "PDBJ", "PDBC"],
        },
        "composite_map": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["YES", "NO"],
        },
    },
    "em_author_list": {
        "author": {
            "data_type": "author",
            "regex": "(([A-Za-z0-9_]+(( |-|'|\\. )[A-Za-z0-9_]+)*( Jr.| III)?, [A-Za-z0-9_]\\.(-?[A-Za-z0-9_]+\\.)*)|(Seattle Structural Genomics Center for Infectious Disease.*)|(Structural Genomics Consortium.*)|(QCRG Structural Biology Consortium.*)|(Center for Structural Genomics of Infectious Diseases.*)|(Center for Structural Biology of Infectious Diseases.*))",
            "options": [],
        },
        "identifier_ORCID": {
            "data_type": "orcid_id",
            "regex": "[0-9]{4}-[0-9]{4}-[0-9]{4}-([0-9]{3}X|[0-9]{4})",
            "options": [],
        },
        "ordinal": {"data_type": "positive_int", "regex": "[1-9][0-9]*", "options": []},
    },
    "em_db_reference": {
        "access_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "db_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["PDB", "EMDB"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "relationship": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["IN FRAME", "OTHER"],
        },
    },
    "em_db_reference_auxiliary": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "link": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "link_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["2D EM DATA", "CORRELATIVE LIGHT MICROSCOPY"],
        },
    },
    "em_depui": {
        "composite_map_deposition": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["COMPOSITE MAP", "NO"],
        },
        "depositor_hold_instructions": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["REL", "HOLD", "HOLD8W", "HPUB"],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "macromolecule_description": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["YES", "NO"],
        },
        "obsolete_instructions": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "same_authors_as_pdb": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["YES", "NO"],
        },
        "same_title_as_pdb": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["YES", "NO"],
        },
    },
    "em_obsolete": {
        "date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entry": {"data_type": "emd_id", "regex": "EMD-[0-9]{4,}", "options": []},
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_supersede": {
        "date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entry": {"data_type": "emd_id", "regex": "EMD-[0-9]{4,}", "options": []},
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_entity_assembly_molwt": {
        "entity_assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "experimental_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["YES", "NO"],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["MEGADALTONS", "KILODALTONS/NANOMETER"],
        },
        "value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_entity_assembly_naturalsource": {
        "cell": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "cellular_location": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ncbi_tax_id": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "organism": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "organelle": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "organ": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "strain": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "tissue": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_entity_assembly_synthetic": {
        "cell": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "cellular_location": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ncbi_tax_id": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "organism": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "organelle": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "organ": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "strain": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "tissue": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_entity_assembly_recombinant": {
        "cell": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ncbi_tax_id": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "organism": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "plasmid": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "strain": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_virus_natural_host": {
        "entity_assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ncbi_tax_id": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "organism": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "strain": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_virus_synthetic": {
        "entity_assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "organism": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ncbi_tax_id": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "strain": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_virus_shell": {
        "diameter": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "entity_assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "triangulation": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
    },
    "em_specimen": {
        "concentration": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "embedding_applied": {
            "data_type": "boolean",
            "regex": "YES|NO",
            "options": ["YES", "NO"],
        },
        "experiment_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "shadowing_applied": {
            "data_type": "boolean",
            "regex": "YES|NO",
            "options": ["YES", "NO"],
        },
        "staining_applied": {
            "data_type": "boolean",
            "regex": "YES|NO",
            "options": ["YES", "NO"],
        },
        "vitrification_applied": {
            "data_type": "boolean",
            "regex": "YES|NO",
            "options": ["YES", "NO"],
        },
    },
    "em_embedding": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "material": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_fiducial_markers": {
        "diameter": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "em_tomography_specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "manufacturer": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_focused_ion_beam": {
        "current": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dose_rate": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "duration": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "em_tomography_specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "final_thickness": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "initial_thickness": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "instrument": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ion": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "temperature": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "voltage": {"data_type": "positive_int", "regex": "[1-9][0-9]*", "options": []},
    },
    "em_grid_pretreatment": {
        "atmosphere": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pressure": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "sample_support_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "time": {"data_type": "positive_int", "regex": "[1-9][0-9]*", "options": []},
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["GLOW DISCHARGE", "PLASMA CLEANING"],
        },
    },
    "em_ultramicrotomy": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "em_tomography_specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "final_thickness": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "instrument": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "temperature": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
    },
    "em_high_pressure_freezing": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "em_tomography_specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "instrument": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_shadowing": {
        "angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "material": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "thickness": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "em_tomography_specimen": {
        "cryo_protectant": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "fiducial_markers": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["YES", "NO"],
        },
        "high_pressure_freezing": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["YES", "NO"],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "sectioning": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["NO SECTIONING", "ULTRAMICROTOMY", "FOCUSED ION BEAM"],
        },
        "specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_crystal_formation": {
        "atmosphere": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "instrument": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "lipid_mixture": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "lipid_protein_ratio": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "temperature": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "time": {"data_type": "positive_int", "regex": "[1-9][0-9]*", "options": []},
        "time_unit": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["MINUTE", "HOUR", "DAY", "MONTH", "YEAR"],
        },
    },
    "em_staining": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "material": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "specimen_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["NEGATIVE", "POSITIVE", "NONE"],
        },
    },
    "em_support_film": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "material": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "CARBON",
                "FORMVAR",
                "CELLULOSE ACETATE",
                "PARLODION",
                "GOLD",
                "GRAPHENE",
                "GRAPHENE OXIDE",
                "SILICON DIOXIDE",
            ],
        },
        "sample_support_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "thickness": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "topology": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["CONTINUOUS", "LACEY", "HOLEY", "HOLEY ARRAY"],
        },
    },
    "em_buffer_component": {
        "buffer_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "concentration": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "concentration_units": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "formula": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_diffraction": {
        "camera_length": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "imaging_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "tilt_angle_list": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_diffraction_shell": {
        "em_diffraction_stats_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "fourier_space_coverage": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "high_resolution": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "low_resolution": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "multiplicity": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "num_structure_factors": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "phase_residual": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "em_diffraction_stats": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "fourier_space_coverage": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "high_resolution": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "num_intensities_measured": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "num_structure_factors": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "overall_phase_error": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "overall_phase_residual": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "phase_error_rejection_criteria": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "r_merge": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "r_sym": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "em_tomography": {
        "axis1_angle_increment": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "axis1_max_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "axis1_min_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "axis2_angle_increment": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "axis2_max_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "axis2_min_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dual_tilt_axis_rotation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "imaging_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_image_recording": {
        "average_exposure_time": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "avg_electron_dose_per_subtomogram": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "avg_electron_dose_per_image": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "detector_mode": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["COUNTING", "INTEGRATING", "SUPER-RESOLUTION", "OTHER"],
        },
        "film_or_detector_model": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "imaging_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "num_diffraction_images": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "num_grids_imaged": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "num_real_images": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
    },
    "em_imaging_optics": {
        "chr_aberration_corrector": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "energyfilter_lower": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "energyfilter_slit_width": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "energyfilter_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "energyfilter_upper": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "imaging_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "phase_plate": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sph_aberration_corrector": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_final_classification": {
        "avg_num_images_per_class": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "num_classes": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["2D", "3D"],
        },
    },
    "em_start_model": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "emdb_id": {"data_type": "emd_id", "regex": "EMD-[0-9]{4,}", "options": []},
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "insilico_model": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "orthogonal_tilt_angle1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "orthogonal_tilt_angle2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "orthogonal_tilt_num_images": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "other": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdb_id": {
            "data_type": "pdb_id",
            "regex": "([1-9][A-Z0-9]{3}|PDB_[A-Z0-9]{8})",
            "options": [],
        },
        "random_conical_tilt_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "random_conical_tilt_num_images": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "RANDOM CONICAL TILT",
                "ORTHOGONAL TILT",
                "EMDB MAP",
                "PDB ENTRY",
                "INSILICO MODEL",
                "NONE",
                "OTHER",
            ],
        },
    },
    "em_software": {
        "category": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "IMAGE ACQUISITION",
                "PARTICLE SELECTION",
                "VOLUME SELECTION",
                "CLASSIFICATION",
                "MASKING",
                "RECONSTRUCTION",
                "INITIAL EULER ASSIGNMENT",
                "FINAL EULER ASSIGNMENT",
                "CTF CORRECTION",
                "LAYERLINE INDEXING",
                "DIFFRACTION INDEXING",
                "MODEL FITTING",
                "MODEL REFINEMENT",
                "SERIES ALIGNMENT",
                "MOLECULAR REPLACEMENT",
                "LATTICE DISTORTION CORRECTION",
                "SYMMETRY DETERMINATION",
                "CRYSTALLOGRAPHY MERGING",
                "EWALD SPHERE CORRECTION",
                "OTHER",
            ],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "fitting_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "imaging_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "version": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_euler_angle_assignment": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "order": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["INITIAL", "FINAL"],
        },
        "proj_matching_angular_sampling": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "proj_matching_merit_function": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "proj_matching_num_projections": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "PROJECTION MATCHING",
                "COMMON LINE",
                "ANGULAR RECONSTITUTION",
                "COMMON LINE",
                "RANDOM ASSIGNMENT",
                "NOT APPLICABLE",
                "MAXIMUM LIKELIHOOD",
                "OTHER",
            ],
        },
    },
    "em_ctf_correction": {
        "amplitude_correction": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["YES", "NO"],
        },
        "amplitude_correction_factor": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "amplitude_correction_space": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["REAL", "RECIPROCAL"],
        },
        "correction_operation": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["MULTIPLICATION", "DIVISION"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "em_image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "phase_reversal": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["YES", "NO"],
        },
        "phase_reversal_anisotropic": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["YES", "NO"],
        },
        "phase_reversal_correction_space": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["REAL", "RECIPROCAL"],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_volume_selection": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "num_tomograms": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "num_volumes_extracted": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "reference_model": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_3d_crystal_entity": {
        "angle_alpha": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_beta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_gamma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "length_a": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_b": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_c": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "space_group_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "space_group_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "em_2d_crystal_entity": {
        "angle_gamma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c_sampling_length": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_assembly_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "length_a": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_b": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_c": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "space_group_name_H-M": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "P 1",
                "P 2",
                "P 1 2",
                "P 1 21",
                "C 1 2",
                "P 2 2 2",
                "P 2 2 21",
                "P 2 21 21",
                "C 2 2 2",
                "P 4",
                "P 4 2 2",
                "P 4 21 2",
                "P 3",
                "P 3 1 2",
                "P 3 2 1",
                "P 6",
                "P 6 2 2",
            ],
        },
    },
    "em_image_processing": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "image_recording_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_particle_selection": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "num_particles_selected": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "reference_model": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_map": {
        "annotation_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "axis_order_fast": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["X", "Y", "Z"],
        },
        "axis_order_medium": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["X", "Y", "Z"],
        },
        "axis_order_slow": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["X", "Y", "Z"],
        },
        "cell_a": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cell_b": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cell_c": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cell_alpha": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cell_beta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cell_gamma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "contour_level": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "contour_level_source": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["author", "emdb", "software"],
        },
        "data_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Image stored as signed byte",
                "Image stored as signed integer (2 bytes)",
                "Image stored as floating point number (4 bytes)",
            ],
        },
        "dimensions_col": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "dimensions_row": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "dimensions_sec": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "endian_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["big", "little"],
        },
        "file": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "original_file": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "format": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {"data_type": "positive_int", "regex": "[1-9][0-9]*", "options": []},
        "partition": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "limit_col": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "limit_row": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "limit_sec": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "origin_col": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "origin_row": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "origin_sec": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pixel_spacing_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pixel_spacing_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pixel_spacing_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "size_kb": {"data_type": "positive_int", "regex": "[1-9][0-9]*", "options": []},
        "spacing_x": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "spacing_y": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "spacing_z": {
            "data_type": "positive_int",
            "regex": "[1-9][0-9]*",
            "options": [],
        },
        "statistics_average": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "statistics_maximum": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "statistics_minimum": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "statistics_std": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "symmetry_space_group": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "primary map",
                "half map",
                "additional map",
                "mask",
                "raw map",
                "FSC half map mask",
                "FSC map-model mask",
                "alignment mask",
                "focused refinement mask",
                "3D classification map",
                "focus refinement map",
                "segmentation",
            ],
        },
    },
    "em_fsc_curve": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "file": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_interpret_figure": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "file": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_layer_lines": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "experiment_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "file": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_structure_factors": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "experiment_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "file": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_depositor_info": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "em_method_selection": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Helical",
                "Single particle",
                "Subtomogram averaging",
                "Tomography",
                "Electron Diffraction",
            ],
        },
        "molecular_description_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["yes", "no"],
        },
    },
    "em_map_depositor_info": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "experiment_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "map_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["primary", "additional"],
        },
        "upload_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "upload_format": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["CCP4/MRC", "SPIDER"],
        },
        "contour_level": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "annotation_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pixel_spacing_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pixel_spacing_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pixel_spacing_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "em_mask_depositor_info": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "upload_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "upload_format": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["CCP4/MRC", "SPIDER"],
        },
        "contour_level": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "annotation_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pixel_spacing_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pixel_spacing_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pixel_spacing_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "em_figure_depositor_info": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "experiment_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "upload_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_layer_lines_depositor_info": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "experiment_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "upload_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "em_motion_correction": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "NONE",
                "WHOLE MICROGRAPH",
                "MICROGRAPH PATCHES",
                "PER PARTICLE",
            ],
        },
        "image_processing_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "em_structure_factors_depositor_info": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "experiment_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "upload_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_seq_map_depositor_info": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "one_letter_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "one_letter_code_mod": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_depositor_info": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "alt_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "formula": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "peptide_like",
                "heterogen",
                "none_of_abv",
                "carbohydrate",
                "lipid",
                "D-peptide linking",
                "L-peptide linking",
                "DNA linking",
                "RNA linking",
                "L-RNA linking",
                "L-DNA linking",
                "saccharide",
                "non-polymer",
                "peptide linking",
                "peptide-like",
                "other",
            ],
        },
        "descriptor": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "descriptor_type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["SMILES", "InChI", "InChIKey"],
        },
        "in_dictionary_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "upload_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "upload_file_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_struct_ref_seq_depositor_info": {
        "ref_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "db_align_beg": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "db_align_end": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_accession": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "db_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_seq_one_letter_code": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "seq_align_begin": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_align_end": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_struct_ref_seq_dif_depositor_info": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "ref_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "db_mon_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "db_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_mon_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "db_accession": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "db_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "annotation": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "engineered mutation",
                "cloning artifact",
                "variant",
                "expression tag",
                "insertion",
                "deletion",
                "microheterogeneity",
                "chromophore",
                "linker",
                "conflict",
                "acetylation",
                "amidation",
                "initiating methionine",
            ],
        },
    },
    "pdbx_struct_assembly_prop_depositor_info": {
        "biol_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["ABSA (A^2)", "SSA (A^2)", "MORE"],
        },
        "value": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_struct_assembly_depositor_info": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "method_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "oligomeric_details": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "oligomeric_count": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "matrix_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "upload_file_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_struct_assembly_gen_depositor_info": {
        "id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "asym_id_list": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "assembly_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "oper_expression": {
            "data_type": "operation_expression",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "full_matrices": {
            "data_type": "3x4_matrices",
            "regex": "(((([ \\t]*-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)? +){3})?(-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)? *\\n([\\t ]*\\n)*)){3})*((([ \\t]*-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)? +){3})?(-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)? *\\n([\\t ]*\\n)*)){2}((([ \\t]*-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)? +){3})(-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)? *\\n?([\\t ]*\\n)*))[ \\t]*",
            "options": [],
        },
        "symmetry_operation": {
            "data_type": "symmetry_operation",
            "regex": "[-+0-9XxYyZ/ ]+,[-+0-9XxYyZ/ ]+,[-+0-9XxYyZ/ ]+",
            "options": [],
        },
        "at_unit_matrix": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "chain_id_list": {
            "data_type": "id_list_spc",
            "regex": "[ \\t]*[A-Za-z0-9]+([ \\t]*,[ \\t]*[A-Za-z0-9]+)*[ \\t]*",
            "options": [],
        },
        "all_chains": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "helical_rotation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "helical_rise": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_struct_oper_list_depositor_info": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "identity operation",
                "point symmetry operation",
                "helical symmetry operation",
                "crystal symmetry operation",
                "3D crystal symmetry operation",
                "2D crystal symmetry operation",
                "transform to point frame",
                "transform to helical frame",
                "transform to crystal frame",
                "transform to 2D crystal frame",
                "transform to 3D crystal frame",
                "build point asymmetric unit",
                "build helical asymmetric unit",
                "build 2D crystal asymmetric unit",
                "build 3D crystal asymmetric unit",
            ],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "symmetry_operation": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "matrix[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "vector[3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_point_symmetry_depositor_info": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "Schoenflies_symbol": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["I", "O", "T", "C", "D"],
        },
        "circular_symmetry": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "H-M_notation": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "status_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
    },
    "pdbx_helical_symmetry_depositor_info": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "number_of_operations": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "rotation_per_n_subunits": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rise_per_n_subunits": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "n_subunits_divisor": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "dyad_axis": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "yes"],
        },
        "circular_symmetry": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "status_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
    },
    "pdbx_struct_assembly_auth_evidence_depositor_info": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "assembly_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "experimental_support": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "gel filtration",
                "light scattering",
                "homology",
                "equilibrium centrifugation",
                "mass spectrometry",
                "SAXS",
                "immunoprecipitation",
                "isothermal titration calorimetry",
                "cross-linking",
                "native gel electrophoresis",
                "microscopy",
                "assay for oligomerization",
                "scanning transmission electron microscopy",
                "surface plasmon resonance",
                "fluorescence resonance energy transfer",
                "NMR relaxation study",
                "NMR Distance Restraints",
                "electron microscopy",
                "none",
            ],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_solvent_atom_site_mapping": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pre_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pre_auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pre_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pre_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pre_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pre_auth_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "occupancy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cartn_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pre_Cartn_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pre_Cartn_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pre_Cartn_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "symmetry_as_xyz": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_molecule_features_depositor_info": {
        "entity_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "class": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Antibiotic",
                "Inhibitor",
                "Antitumor",
                "Trypsin inhibitor",
                "Thrombin inhibitor",
                "Toxin",
                "Enzyme inhibitor",
                "Anticancer",
                "Antimicrobial",
                "Antifungal",
                "Anthelmintic",
                "Antiviral",
                "Antineoplastic",
                "Antiparasitic",
                "Antiretroviral",
                "Antithrombotic",
                "Anticoagulant",
                "Chaperone",
                "binding",
                "Antiinflammatory",
                "CASPASE inhibitor",
                "Metal transport",
                "Growth factor",
                "Oxidation-reduction",
                "Receptor",
                "Immunosuppressant",
                "Antagonist",
                "Lantibiotics",
                "Metabolism",
                "Unknown",
            ],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "macrolide",
                "amino acid",
                "non-polymer",
                "peptide-like",
                "aminoglycoside",
                "anthracycline",
                "oligosaccharide",
                "polysaccharide",
                "oligopeptide",
                "polypeptide",
                "lipopeptide",
                "glycopeptide",
                "ansamycin",
                "Quinolone",
                "thiolactone",
                "thiopeptide",
                "heterocyclic",
                "polycyclic",
                "cyclic depsipeptide",
                "cyclic peptide",
                "cyclic lipopeptide",
                "chromophore",
                "chalkophore",
                "siderophore",
                "peptide-like",
                "imino sugar",
                "keto acid",
                "lipoglycopeptide",
                "nucleoside",
                "peptaibol",
                "anthraquinone",
            ],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_instance_depositor_info": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "in_polymer_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "author_provided_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "formula": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_depui_status_flags": {
        "dep_dataset_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "primary_citation_status": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "corresponding_author_status": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "reference_citation_status": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "is_grant_funded": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "has_ncs_data": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "prediction_target": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "has_helical_symmetry": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "has_point_symmetry": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "has_cyclic_symmetry": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "has_accepted_terms_and_conditions": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "has_viewed_validation_report": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "validated_model_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "merge_prior_model_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "merge_replace_model_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "merge_output_model_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "is_ligand_processing_complete": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sample_xyz_sequence_alignments_valid": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "has_sas_data": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "is_sas_deposited": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "use_sas_refine": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "merged_fail": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "post_rel_replacement_reason": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Chirality error",
                "Polymer geometry",
                "Ligand geometry",
                "Ligand identity",
                "Model completeness",
                "Model orientation/position",
                "Polymer backbone linkage",
                "Atomic clashes",
                "Sequence discrepancy",
                "Atoms with unrealistic or zero occupancies",
                "Real space R-factor",
                "Occupancy of atoms on special symmetry positions",
                "Missing anisotropic B-factor",
            ],
        },
        "post_rel_replacement_reason_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "has_accepted_assemblies": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "assembly_inferred": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
    },
    "pdbx_depui_upload": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "file_content_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "file_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "file_size": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "valid_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "diagnostic_message": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sequence_align": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_depui_validation_status_flags": {
        "dep_dataset_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "residual_B_factors_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "occupancy_outliers_low": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "occupancy_outliers_high": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "adp_outliers_low": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "solvent_outliers": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "tls_no_aniso": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "adp_outliers_zero": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_upload_depositor_info": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "upload_file_type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "CIF",
                "PDBX",
                "GIF",
                "JPG",
                "JPEG",
                "PNG",
                "SDF",
                "SVG",
                "TIF",
                "TIFF",
                "other",
            ],
        },
        "upload_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_depui_entity_status_flags": {
        "dep_dataset_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "has_mutation": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "sample_xyz_sequence_alignments_valid": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_depui_entity_features": {
        "dep_dataset_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Chimera",
                "Antibiotic/inhibitor",
                "Carbohydrate",
                "None of these",
            ],
        },
    },
    "pdbx_deposition_message_info": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "deposition_data_set_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "message_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "timestamp": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sender": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "content_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "content_value": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "parent_message_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "message_subject": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "message_text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "message_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "send_status": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_deposition_message_file_reference": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "deposition_data_set_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "message_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "content_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "content_format": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "partition_number": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "version_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "storage_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_depui_entry_details": {
        "dep_dataset_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "wwpdb_site_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "experimental_methods": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "requested_accession_types": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "validated_contact_email": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "validated_identifier_ORCID": {
            "data_type": "orcid_id",
            "regex": "[0-9]{4}-[0-9]{4}-[0-9]{4}-([0-9]{3}X|[0-9]{4})",
            "options": [],
        },
        "country": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "structural_genomics_flag": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "related_database_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "related_database_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "replace_pdb_id": {
            "data_type": "pdbx_PDB_obsoleted_db_id",
            "regex": "[0-9][0-9a-zA-Z]{3}( [0-9][0-9a-zA-Z]{3})*",
            "options": [],
        },
    },
    "pdbx_data_processing_status": {
        "task_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "status": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_instance_feature": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["SUBJECT OF INVESTIGATION", "NO FUNCTIONAL ROLE", "OTHER"],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_entity_src_gen_depositor_info": {
        "src_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "N-terminal tag",
                "C-terminal tag",
                "Biological sequence",
                "Linker",
            ],
        },
        "beg_seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "gene_src_gene": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "gene_src_scientific_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_gene": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_scientific_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "host_org_strain": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "gene_src_ncbi_taxonomy_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "host_org_ncbi_taxonomy_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "host_org_vector_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "plasmid_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_model": {
        "id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_model_atom": {
        "atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ordinal_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "charge": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_Cartn_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "model_Cartn_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "model_Cartn_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "type_symbol": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_model_bond": {
        "atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "model_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "value_order": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["SING", "DOUB", "TRIP", "QUAD", "AROM", "POLY", "DELO", "PI"],
        },
        "ordinal_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_chem_comp_model_feature": {
        "model_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "feature_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature_value": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_model_descriptor": {
        "model_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "descriptor": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["SMILES_CANONICAL", "SMILES", "InChI", "InChIKey"],
        },
    },
    "pdbx_chem_comp_model_audit": {
        "model_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "annotator": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "processing_site": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "action_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Create component",
                "Modify formal charge",
                "Modify atom id",
                "Modify charge",
                "Modify component atom id",
                "Modify component comp_id",
                "Modify value order",
                "Modify descriptor",
                "Modify identifier",
                "Modify coordinates",
                "Other modification",
                "Obsolete model",
                "Initial release",
            ],
        },
    },
    "pdbx_chem_comp_model_reference": {
        "model_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "db_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "db_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_view_category_group": {
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        }
    },
    "pdbx_view_category": {
        "view_group_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "category_view_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_view_item": {
        "item_name": {
            "data_type": "name",
            "regex": "_[_A-Za-z0-9]+\\.[][_A-Za-z0-9%-]+",
            "options": [],
        },
        "category_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "item_view_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "item_view_mandatory_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N", "H"],
        },
        "item_view_allow_alternate_value": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
    },
    "pdbx_coord": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "chain_atoms_Y_P": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "P", "NA"],
        },
        "hydrogen_atoms_Y_N": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "solvent_atoms_Y_N": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
        "structure_factors_Y_N": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "P", "N", "H"],
        },
    },
    "pdbx_connect": {
        "res_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "hetgroup_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "formul": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "hetgroup_chemical_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "parent_residue": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "formal_charge": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "class_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "class_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "status": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "modified_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
    },
    "pdbx_connect_type": {
        "res_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ndbTokenType": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "modified": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_connect_modification": {
        "res_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "modification": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_connect_atom": {
        "res_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "connect_to": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type_symbol": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "charge": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "bond_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "align_pos": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_database_PDB_master": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "num_remark": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "num_ftnote": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "num_het": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "num_helix": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "num_sheet": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "num_turn": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "num_site": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "num_trans": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "num_coord": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "num_ter": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "num_conect": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "num_seqres": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_database_pdb_omit": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "record_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_dbref": {
        "pdb_id_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "chain_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "begin_res_number": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "begin_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_res_number": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "database_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "database_accession": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "database_id_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "database_begin_res_number": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "database_begin_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "database_end_res_number": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "database_end_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_drug_info": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "num_per_asym_unit": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "num_of_whole_molecule": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "size_of_molecule_per_asym_unit": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_inhibitor_info": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "num_per_asym_unit": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "pdbx_ion_info": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "numb_per_asym_unit": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "pdbx_hybrid": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "sugar_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "strand_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "residue_names": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_na_strand_info": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "num_of_NA_strands_per_asym_unit": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "num_of_NA_strands_per_biol_unit": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "fract_NA_strand_per_asym_unit": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_nonstandard_list": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "number_atoms_nh": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_pdb_compnd": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_pdb_source": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_protein_info": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "num_per_asym_unit": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "pdbx_solvent_info": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "numb_per_asym_unit": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "pdbx_source": {
        "src_method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        }
    },
    "pdbx_struct_biol_func": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "biol_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "function": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_struct_pack_gen": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "color_red": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "color_green": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "color_blue": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crystal_type": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "packing_type": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_trna_info": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "num_per_asym_unit": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "pdbx_unpair": {
        "chain_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "residue_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "residue_number": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_refine_ls_restr_ncs": {
        "dom_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "rms_dev": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "weight": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_struct_ncs_virus_gen": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "oper_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_chain_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_sequence_annotation": {
        "pdb_chain_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ncbi_taxid": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_post_process_details": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "text": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "seq_details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_post_process_status": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "cycle_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
        },
        "date_begin": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "date_end": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "annotator": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_struct_link": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "covale",
                "disulf",
                "hydrog",
                "metalc",
                "mismat",
                "saltbr",
                "modres",
                "covale_base",
                "covale_sugar",
                "covale_phosphate",
            ],
        },
        "ptnr1_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr1_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_label_seq_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ptnr1_label_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr1_symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "ptnr2_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr2_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr2_label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ptnr2_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr2_label_seq_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ptnr2_label_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ptnr2_symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "details": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbx_dist_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_missing_residue_list": {
        "pdb_model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdb_chain_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_residue_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_residue_number": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_insertion_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_data_processing_cell": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "a": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "a_tolerance": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "b": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "b_tolerance": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c_tolerance": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "alpha": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "alpha_tolerance": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "beta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "beta_tolerance": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "gamma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "gamma_tolerance": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "volume": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mosaicity": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "resolution_range": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "space_group": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_data_processing_reflns": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "number_all": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "number_marked_reject": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "percent_marked_reject": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "percent_rejected": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_factor_all_linear": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_data_processing_detector": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "wavelength": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "polarization": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "beam_position_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "beam_position_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cassette_rot_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cassette_rot_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "cassette_rot_z": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scale_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "skew": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crossfire_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crossfire_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crossfire_xy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "date": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "experimentor": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "crystal_data_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "processing_path": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "processing_files": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_nonstandard": {
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "base modification",
                "sugar modification",
                "phosphate modification",
            ],
        },
    },
    "pdbx_entity_poly_protein_class": {
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "class": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["enzyme", "regulatory", "structural", "other"],
        },
    },
    "pdbx_entity_name_taxonomy_tree": {
        "id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "parent_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_name_taxonomy": {
        "id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "name_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["STANDARD", "SYNONYM", "SUBCLASS", "DEPRECATED"],
        },
    },
    "pdbx_entity_name_instance": {
        "name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdb_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "rcsb_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_chain_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_mol_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_tableinfo": {
        "tablename": {
            "data_type": "code30",
            "regex": ".?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?",
            "options": [],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "table_serial_no": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "group_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "WWW_Selection_Criteria": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "WWW_Report_Criteria": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "pdbx_columninfo": {
        "columnname": {
            "data_type": "code30",
            "regex": ".?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?",
            "options": [],
        },
        "tablename": {
            "data_type": "code30",
            "regex": ".?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?.?",
            "options": [],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "example": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "table_serial_no": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "column_serial_no": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "WWW_Selection_Criteria": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "WWW_Report_Criteria": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "pdbx_val_angle": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_3": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_PDB_insert_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_PDB_insert_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_PDB_insert_id_3": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "label_alt_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id_3": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id_3": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id_3": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_deviation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_val_bond": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_PDB_insert_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_PDB_insert_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "bond": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "bond_deviation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_val_contact": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_PDB_insert_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_PDB_insert_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_val_sym_contact": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_asym_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_PDB_insert_id_1": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_PDB_insert_id_2": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id_1": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_comp_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id_2": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "site_symmetry_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "site_symmetry_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_rmch_outlier": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_PDB_insert_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "phi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "psi": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_missing_atom_poly": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_PDB_insert_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "atom_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_missing_atom_nonpoly": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_PDB_insert_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_val_chiral": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_PDB_insert_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "chiral_center_atom_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "chiral_neighbor_atom_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "chiral_center_atom_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "chiral_neighbor_atom_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_atlas": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "page_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "page_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_summary_flags": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "flag_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["experimental_data_Y_N", "anisotropic_refinement_Y_N"],
        },
        "flag_value": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["Y", "N"],
        },
    },
    "pdbx_entity_func_bind_mode": {
        "domain_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "protein_binds_to": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["DNA", "RNA"],
        },
        "type": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["enzyme", "regulatory", "structural", "other"],
        },
    },
    "pdbx_entity_func_enzyme": {
        "bind_mode_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "DNA Polymerase",
                "DNA Polymerase/Reverse Transcriptase",
                "RNA Polymerase",
                "DNA Nuclease/Endonuclease",
                "DNA Nuclease/Exonuclease",
                "RNA Nuclease/Endonuclease",
                "RNA Nuclease/Exonuclease",
                "Glycosylase",
                "Helicase",
                "Ligase",
                "Lyase",
                "MRNA Capping",
                "Kinase",
                "Methylase or Methyltransferase",
                "Phosphatase",
                "Recombinase/Integrase",
                "Recombinase/Resolvase",
                "Recombinase/Invertase",
                "Recombinase/Transposase",
                "Recombinase/Other",
                "DNA Repair",
                "Synthetase",
                "Thrombin",
                "TRNA Modifying",
                "Topoisomerase",
                "Other",
            ],
        },
    },
    "pdbx_entity_func_regulatory": {
        "bind_mode_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "DNA Repair Activator",
                "DNA Repair Repressor",
                "Recombination Activator",
                "Recombination Repressor",
                "Replication Factor/Activator",
                "Replication Factor/Repressor",
                "Transcription Factor/Activator",
                "Transcription Factor/Activator and Repressor",
                "Transcription Factor/Coactivator",
                "Transcription Factor/Corepressor",
                "Transcription Factor/General",
                "Transcription Factor/Repressor",
                "Transcription Factor/Elongation",
                "Transcription Factor/Termination",
                "Translation Factor/Initiator",
                "Translation Factor/Elongation",
                "Translation Factor/Termination",
                "Spliceosomal Protein",
                "Other",
            ],
        },
    },
    "pdbx_entity_func_structural": {
        "bind_mode_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Chromosomal",
                "HMG",
                "Histone",
                "Telomere Binding",
                "Viral Coat",
                "Ribosomal Protein",
                "Ribonucleoprotein",
                "Signal Recognition Particle",
                "Other",
            ],
        },
    },
    "pdbx_entity_func_other": {
        "bind_mode_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["Antibiotic", "Antibody", "Other"],
        },
    },
    "pdbx_entity_poly_domain": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "begin_mon_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "begin_seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "end_mon_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end_seq_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_na_struct_keywds": {
        "entry_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "conformation_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["A", "B", "Z", "RH", "U", "T"],
        },
        "strand_description": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "DOUBLE HELIX",
                "TRIPLE HELIX",
                "QUADRUPLE HELIX",
                "SINGLE STRAND",
            ],
        },
        "special_feature": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_poly_na_type": {
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "DNA",
                "RNA",
                "DNA/RNA hybrid",
                "Peptide NA",
                "t-RNA",
                "Ribosomal RNA",
                "Ribozyme",
                "Aptamer",
                "Oligonucleotide fragment",
            ],
        },
    },
    "pdbx_entity_poly_na_nonstandard": {
        "entity_id": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "feature": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "base modification",
                "sugar modification",
                "phosphate modification",
                "cyclic nucleotide",
                "2'-5'-phosphodiester linkage",
            ],
        },
    },
    "pdbx_virtual_angle": {
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "atom_site_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_seq_id_1": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "atom_site_label_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_seq_id_2": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "atom_site_label_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_alt_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_atom_id_3": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_3": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_seq_id_3": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "atom_site_label_asym_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_3": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "site_symmetry_1": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_2": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_3": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_virtual_bond": {
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "atom_site_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_seq_id_1": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "atom_site_label_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_seq_id_2": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "atom_site_label_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_2": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "dist": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dist_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "site_symmetry_1": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_2": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
    },
    "pdbx_virtual_torsion": {
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "atom_site_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_alt_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_seq_id_1": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "atom_site_label_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_alt_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_seq_id_2": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "atom_site_label_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_alt_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_atom_id_3": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_3": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_seq_id_3": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "atom_site_label_asym_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_id_4": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_alt_id_4": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_atom_id_4": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_label_comp_id_4": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_label_seq_id_4": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "atom_site_label_asym_id_4": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_3": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_3": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_atom_id_4": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_site_auth_asym_id_4": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_comp_id_4": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_site_auth_seq_id_4": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "site_symmetry_1": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_2": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_3": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "site_symmetry_4": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "value_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_sequence_pattern": {
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pattern_count": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "sequence_pattern": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_stereochemistry": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "label_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id_u": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_alt_id_u": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id_v": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_alt_id_v": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_atom_id_w": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "label_alt_id_w": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "volume3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_out_of_plane": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_rms_devs_covalent": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "rms_bonds": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "num_bonds": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "rms_bonds_base": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "num_bonds_base": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "rms_bonds_sugar": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "num_bonds_sugar": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "rms_bonds_phosphate": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "num_bonds_phosphate": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "rms_angles": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "num_angles": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "rms_angles_base": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "num_angles_base": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "rms_angles_sugar": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "num_angles_sugar": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "rms_angles_phosphate": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "num_angles_phosphate": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "pdbx_rms_devs_cov_by_monomer": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "rms_bonds": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "num_bonds": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "rms_angles": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "num_angles": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_sugar_phosphate_geometry": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "neighbor_comp_id_5prime": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "neighbor_comp_id_3prime": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "o3_p_o5_c5": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "p_o5_c5_c4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o5_c5_c4_c3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c5_c4_c3_o3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c4_c3_o3_p": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c3_o3_p_o5": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c4_o4_c1_n1_9": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o4_c1_n1_9_c2_4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o4_c1_n1_9_c6_8": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c4_o4_c1_c2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o4_c1_c2_c3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c1_c2_c3_c4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c2_c3_c4_o4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c3_c4_o4_c1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c5_c4_c3_c2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o4_c4_c3_o3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o3_c3_c2_o2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o5_c5_c4_o4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pseudorot": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "maxtorsion": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "next_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "next_label_seq_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "next_o3_p_o5_c5": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "next_p_o5_c5_c4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "next_o5_c5_c4_c3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "next_c5_c4_c3_o3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "next_c4_c3_o3_p": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "next_c3_o3_p_o5": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "next_c4_o4_c1_n1_9": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "next_o4_c1_n1_9_c2_4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c1_c2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c2_c3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c3_c4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c4_o4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o4_c1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "p_o5": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o5_c5": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c5_c4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c3_o3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o3_p": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "p_o1p": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "p_o2p": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c1_n9_1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "n1_c2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "n1_c6": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "n9_c4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "n9_c8": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c1_c2_c3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c2_c3_c4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c3_c4_o4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c4_o4_c1": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o4_c1_c2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "p_o5_c5": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o5_c5_c4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c5_c4_c3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c4_c3_o3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c3_o3_p": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o3_p_o5": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o4_c1_n1_9": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c1_n1_9_c2_4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c5_c4_o4": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c2_c3_o3": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "o1p_p_o2p": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c2_c1_n1_9": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "c1_n1_9_c6_8": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_nmr_computing": {
        "entry_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "collection": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["XWINNMR", "UXNMR", "VNMR"],
        },
        "collection_version": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "processing": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "UXNMR",
                "XWINNMR",
                "FELIX",
                "FELIX95",
                "FELIX98",
                "NMRPipe",
                "AZARA",
                "FT_NMR",
            ],
        },
        "processing_version": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "data_analysis": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["ANSIG", "AURELIA"],
        },
        "data_analysis_version": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "structure_solution": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "X-PLOR",
                "DIANA",
                "DYANA",
                "DSPACE",
                "DISGEO",
                "DGII",
                "DISMAN",
                "DINOSAUR",
            ],
        },
        "structure_solution_version": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "refinement": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["X-PLOR", "DISCOVER", "GROMOS", "CHARMM", "SA"],
        },
        "refinement_version": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "iterative_relaxation_matrix": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["IRMA", "CORMA", "MARDIGRAS", "X-PLOR"],
        },
        "iterative_relaxation_matrix_version": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_audit_conform_extension": {
        "extension_dict_location": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "extension_dict_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "extension_dict_version": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_dcc_mapman": {
        "pdbid": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_dcc_rscc_mapman": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "correlation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "real_space_R": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "weighted_real_space_R": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "real_space_Zscore": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Biso_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "flag": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_dcc_rscc_mapman_overall": {
        "pdbid": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "correlation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "real_space_R": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "real_space_R_sigma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_dcc_density": {
        "DCC_version": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "pdbid": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdbtype": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "unit_cell": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "space_group_name_H-M": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "space_group_pointless": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ls_d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_d_res_high_sf": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_d_res_low_sf": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_value_R_work": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "R_value_R_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "working_set_count": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "free_set_count": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "occupancy_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Biso_min": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Biso_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Biso_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_wilson": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_wilson_scale": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_I2_over_mean_I_square": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_F_square_over_mean_F2": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mean_E2_1_abs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Padilla-Yeates_L_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Padilla-Yeates_L2_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Padilla-Yeates_L2_mean_pointless": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Z_score_L_test": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "twin_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "twin_operator_xtriage": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "twin_fraction_xtriage": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "twin_Rfactor": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "I_over_sigI_resh": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "I_over_sigI_diff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "I_over_sigI_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ice_ring": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "anisotropy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Z-score": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "prob_peak_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "translational_pseudo_symmetry": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "wavelength": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "B_solvent": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "K_solvent": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "TLS_refinement_reported": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "partial_B_value_correction_attempted": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "partial_B_value_correction_success": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "reflection_status_archived": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "reflection_status_used": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "iso_B_value_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "reflns_twin": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "twin_by_xtriage": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "twin_operator": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "twin_fraction": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "tls_group_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "ncs_group_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "mtrix_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "Matthew_coeff": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "solvent_content": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Cruickshank_dpi_xyz": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dpi_free_R": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fom": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation_overall": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "real_space_R_overall": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "mFo-DFc-3sigma_positive": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "mFo-DFc-6sigma_positive": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "mFo-DFc-3sigma_negative": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "mFo-DFc-6sigma_negative": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "Bmean-Bwilson": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Rfree-Rwork": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "error": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_dcc_geometry": {
        "pdbid": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "Ramachandran_outlier_percent": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Ramachandran_outlier_number": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "Ramachandran_allowed_percent": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Ramachandran_allowed_number": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "Ramachandran_favored_percent": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Ramachandran_favored_number": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "rotamer_outliers_percent": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "rotamer_outliers_number": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "cbeta_deviations": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "all_atom_clashscore": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "overall_score": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "bond_overall_rms": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "bond_overall_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "bond_ligand_rms": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "bond_ligand_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_overall_rms": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_overall_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_ligand_rms": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_ligand_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dihedral_overall_rms": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "dihedral_overall_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chirality_overall_rms": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "chirality_overall_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "planarity_overall_rms": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "planarity_overall_max": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "non-bonded_rms": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_dcc_density_corr": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "program": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ls_d_res_high": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_d_res_low": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_R_factor_R_all": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_R_factor_R_work": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_R_factor_R_free": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_number_reflns_obs": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "ls_percent_reflns_obs": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ls_number_reflns_R_free": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "correlation_coeff_Fo_to_Fc": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "real_space_R": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "correlation": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_dcc_map": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "model_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "RSCC": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSR": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "weighted_RSR": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSRZ": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "weighted_RSRZ": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Biso_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_mean": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSCC_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSR_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wRSR_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSRZ_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wRSRZ_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Biso_mean_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_mean_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSCC_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSR_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wRSR_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSRZ_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wRSRZ_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Biso_mean_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_mean_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSCC_phosphate_group": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSR_phosphate_group": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wRSR_phosphate_group": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSRZ_phosphate_group": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "wRSRZ_phosphate_group": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "Biso_mean_phosphate_group": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "occupancy_mean_phosphate_group": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "shift": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "shift_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "shift_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_connectivity": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_index_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "density_index_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSZD": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSZO": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSZO_Zscore": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "LLDF": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSZD_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSZO_main_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSZD_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSZO_side_chain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSZD_phosphate_group": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "RSZO_phosphate_group": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "quality_indicator": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_deposit_group": {
        "group_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "group_title": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "group_description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "group_type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["changed state", "ground state", "undefined"],
        },
    },
    "pdbx_deposit_group_index": {
        "group_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ordinal_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "dep_set_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_id_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "group_file_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "group_file_timestamp": {
            "data_type": "yyyy-mm-dd:hh:mm",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9](-[0-9]?[0-9])?(:[0-9]?[0-9]:[0-9][0-9])?",
            "options": [],
        },
        "auth_file_label": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_file_content_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["model", "structure factors"],
        },
        "auth_file_format_type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_file_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "auth_file_size": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_struct_assembly_auth_evidence": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "assembly_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "experimental_support": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "gel filtration",
                "light scattering",
                "homology",
                "equilibrium centrifugation",
                "mass spectrometry",
                "SAXS",
                "immunoprecipitation",
                "isothermal titration calorimetry",
                "cross-linking",
                "native gel electrophoresis",
                "microscopy",
                "assay for oligomerization",
                "scanning transmission electron microscopy",
                "surface plasmon resonance",
                "fluorescence resonance energy transfer",
                "NMR relaxation study",
                "NMR Distance Restraints",
                "electron microscopy",
                "none",
            ],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_struct_assembly_auth_classification": {
        "assembly_id": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "reason_for_interest": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "biologically relevant",
                "crystal packing",
                "designed",
                "undetermined",
            ],
        },
    },
    "pdbx_crystal_alignment": {
        "crystal_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "oscillation_range": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "oscillation_start": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "oscillation_end": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "xbeam": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "xbeam_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ybeam": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "ybeam_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crysx_spindle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crysx_spindle_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crysy_vertical": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crysy_vertical_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crysz_beam": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crysz_beam_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crystal_to_detector_distance": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crystal_to_detector_distance_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crossfire_x": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crossfire_x_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crossfire_y": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crossfire_y_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crossfire_xy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crossfire_xy_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "overall_beam_divergence": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "overall_beam_divergence_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_audit_revision_history": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "data_content_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Structure model",
                "NMR restraints",
                "NMR shifts",
                "Structure factors",
                "Chemical component",
                "Primary map",
                "Image",
                "Half map",
                "Additional map",
                "FSC",
                "Mask",
                "EM metadata",
            ],
        },
        "major_revision": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "minor_revision": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "revision_date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "internal_version": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "internal_deposition_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "internal_part_number": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "part_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_audit_revision_group": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "revision_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "data_content_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Structure model",
                "NMR restraints",
                "NMR shifts",
                "Structure factors",
                "Chemical component",
                "Primary map",
                "Image",
                "Half map",
                "Additional map",
                "FSC",
                "Mask",
                "EM metadata",
            ],
        },
        "group": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Advisory",
                "Atomic model",
                "Author supporting evidence",
                "Data collection",
                "Data processing",
                "Database references",
                "Derived calculations",
                "Experimental data",
                "Experimental preparation",
                "Non-polymer description",
                "Other",
                "Polymer sequence",
                "Refinement description",
                "Structure summary",
                "Experimental summary",
                "Source and taxonomy",
                "Version format compliance",
            ],
        },
    },
    "pdbx_audit_revision_category": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "revision_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "data_content_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Structure model",
                "NMR restraints",
                "NMR shifts",
                "Structure factors",
                "Chemical component",
                "Primary map",
                "Image",
                "Half map",
                "Additional map",
                "FSC",
                "Mask",
                "EM metadata",
            ],
        },
        "category": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_audit_revision_details": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "revision_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "data_content_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Structure model",
                "NMR restraints",
                "NMR shifts",
                "Structure factors",
                "Chemical component",
                "Primary map",
                "Image",
                "Half map",
                "Additional map",
                "FSC",
                "Mask",
                "EM metadata",
            ],
        },
        "provider": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["repository", "author"],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Initial release",
                "Coordinate replacement",
                "Obsolete",
                "Remediation",
                "Data added",
                "Data removed",
                "Data updated",
            ],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_audit_revision_item": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "revision_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "data_content_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Structure model",
                "NMR restraints",
                "NMR shifts",
                "Structure factors",
                "Chemical component",
                "Primary map",
                "Image",
                "Half map",
                "Additional map",
                "FSC",
                "Mask",
                "EM metadata",
            ],
        },
        "item": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_supporting_exp_data_set": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "data_content_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "data_version_major": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "data_version_minor": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_database_doi": {
        "db_name": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["EMDB", "PDB", "BMRB"],
        },
        "db_DOI": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_audit_conform": {
        "dict_location": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dict_name": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "dict_version": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_serial_crystallography_measurement": {
        "diffrn_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pulse_energy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pulse_duration": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "xfel_pulse_repetition_rate": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pulse_photon_energy": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "photons_per_pulse": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "source_size": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "source_distance": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "focal_spot_size": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "collimation": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "collection_time_total": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_serial_crystallography_sample_delivery": {
        "diffrn_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "method": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["fixed target", "injection"],
        },
    },
    "pdbx_serial_crystallography_sample_delivery_injection": {
        "diffrn_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "injector_diameter": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "injector_temperature": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "injector_pressure": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "flow_rate": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "carrier_solvent": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "crystal_concentration": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "preparation": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "power_by": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "injector_nozzle": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "jet_diameter": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "filter_size": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_serial_crystallography_sample_delivery_fixed_target": {
        "diffrn_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "description": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sample_holding": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "support_base": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sample_unit_size": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "crystals_per_unit": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "sample_solvent": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "sample_dehydration_prevention": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "motion_control": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "velocity_horizontal": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "velocity_vertical": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_serial_crystallography_data_reduction": {
        "diffrn_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "frames_total": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "xfel_pulse_events": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "frame_hits": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "crystal_hits": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "droplet_hits": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "frames_failed_index": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "frames_indexed": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "lattices_indexed": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "xfel_run_numbers": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "lattices_merged": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_audit_support": {
        "funding_organization": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "country": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "grant_number": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_entity_branch_list": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "hetero": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_entity_branch_link": {
        "link_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "entity_branch_list_num_1": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "entity_branch_list_num_2": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "comp_id_1": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "comp_id_2": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "leaving_atom_id_1": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_stereo_config_1": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["R", "S", "N"],
        },
        "atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "leaving_atom_id_2": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "atom_stereo_config_2": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["R", "S", "N"],
        },
        "value_order": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["sing", "doub", "trip", "quad", "arom", "poly", "delo", "pi"],
        },
    },
    "pdbx_entity_branch": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_branch_scheme": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "hetero": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["no", "n", "yes", "y"],
        },
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "mon_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "pdb_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "pdb_mon_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_num": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_mon_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_related": {
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "related_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "relationship_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["Carbohydrate core", "Precursor"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_atom_related": {
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "related_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "related_atom_id": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "related_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["Carbohydrate core", "Precursor"],
        },
    },
    "pdbx_refln_signal_binning": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "upper_threshold": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_sifts_xref_db": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "seq_id_ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "mon_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "mon_id_one_letter_code": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "unp_res": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "unp_num": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "unp_acc": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "unp_segment_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "unp_instance_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "res_type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "observed": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "mh_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "xref_db_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "xref_db_acc": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "xref_domain_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "xref_db_segment_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "xref_db_instance_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
    },
    "pdbx_sifts_xref_db_segments": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "xref_db": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "xref_db_acc": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "domain_name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "segment_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "instance_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "seq_id_start": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "seq_id_end": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "pdbx_sifts_unp_segments": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "unp_acc": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "segment_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "instance_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "unp_start": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "unp_end": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "seq_id_start": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "seq_id_end": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "best_mapping": {
            "data_type": "uchar1",
            "regex": "[+]?[A-Za-z0-9]",
            "options": ["Y", "N"],
        },
        "identity": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_data_usage": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["license", "disclaimer"],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "url": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "name": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_entity_remapping": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "orig_entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_chain_remapping": {
        "entity_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "orig_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "orig_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "applied_operations": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_initial_refinement_model": {
        "id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "entity_id_list": {
            "data_type": "entity_id_list",
            "regex": "[0-9A-Za-z]+(,[0-9A-Za-z]+)*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "in silico model",
                "experimental model",
                "integrative model",
                "other",
            ],
        },
        "source_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "PDB",
                "AlphaFold",
                "Robetta",
                "RoseTTAFold",
                "ModelArchive",
                "SwissModel",
                "Modeller",
                "ITasser",
                "PDB-Dev",
                "PHYRE",
                "InsightII",
                "Other",
            ],
        },
        "accession_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "details": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_investigation": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["Fragment Screening", "Crystallization Screening"],
        },
        "resource_name": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["PDB", "BMRB", "EMDB"],
        },
        "resource_accession": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_chem_comp_pcm": {
        "pcm_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "modified_residue_id": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "12-Hydroxyfarnesylation",
                "12-Oxomyristoylation",
                "12R-Hydroxymyristoylation",
                "14-Hydroxy-10,13-dioxo-7-heptadecenoic acid",
                "(3-Aminopropyl)(5'-adenosyl)phosphono amidation",
                "2-Aminoadipylation",
                "2-Aminoethylphosphorylation",
                "2-Cholinephosphorylation",
                "2-Hydroxyisobutyrylation",
                "2-Oxo-5,5-dimethylhexanoylation",
                "2-Oxobutanoic acid",
                "2,3-Dicarboxypropylation",
                "3-Oxoalanine",
                "3-Phenyllactic acid",
                "(3R)-3-Hydroxybutyrylation",
                "4-Phosphopantetheine",
                "ADP-ribosylation",
                "ADP-riboxanation",
                "AMPylation",
                "Acetamidation",
                "Acetamidomethylation",
                "Acetylation",
                "Alanylation",
                "Allysine",
                "Amination",
                "Arachidoylation",
                "Archaeol",
                "Arginylation",
                "Arsenylation",
                "Asparaginylation",
                "Aspartylation",
                "Bacillithiolation",
                "Benzoylation",
                "Benzylation",
                "Beta-amino acid",
                "Beta-hydroxybutyrylation",
                "Beta-lysylation",
                "Beta-mercaptoethanol",
                "Biotinylation",
                "Bromination",
                "Butyrylation",
                "Carbamoylation",
                "Carboxyethylation",
                "Carboxylation",
                "Carboxymethylation",
                "cGMPylation",
                "Chlorination",
                "Cholesterylation",
                "Citrullination",
                "Crotonylation",
                "Cyanation",
                "Cysteinylation",
                "C-Mannosylation",
                "Deamidation",
                "Decanoylation",
                "Decarboxylation",
                "Dehydroamino acid",
                "Dehydrocoelenterazination",
                "Dehydrogenation",
                "Dehydroxylation",
                "Deoxidation",
                "Deoxyhypusine",
                "Diacylglycerol",
                "Dihydroxyacetonation",
                "Dimethylamination",
                "Diphosphorylation",
                "Diphthamide",
                "Dipyrromethane methylation",
                "Dopaminylation",
                "D-alanylation",
                "D-arginylation",
                "D-asparaginylation",
                "D-aspartylation",
                "D-cysteinylation",
                "D-glutaminylation",
                "D-glutamylation",
                "D-histidinylation",
                "D-isoleucylation",
                "D-lactate",
                "D-leucylation",
                "D-lysylation",
                "D-methionylation",
                "D-phenylalanylation",
                "D-prolylation",
                "D-serylation",
                "D-threoninylation",
                "D-tryptophanylation",
                "D-tyrosination",
                "D-valylation",
                "Ethylation",
                "Ethylsulfanylation",
                "Farnesylation",
                "Fluorination",
                "Formylation",
                "GMPylation",
                "Geranylgeranylation",
                "Glutaminylation",
                "Glutamylation",
                "Glutarylation",
                "Glutathionylation",
                "Glycerophosphorylation",
                "Glycerylphosphorylethanolamination",
                "Glycylation",
                "Heptanoylation",
                "Hexanoylation",
                "Histaminylation",
                "Histidinylation",
                "Hydrogenation",
                "Hydroperoxylation",
                "Hydroxyamination",
                "Hydroxyethylation",
                "Hydroxylation",
                "Hydroxymethylation",
                "Hydroxysulfanylation",
                "Hypusine",
                "Iodination",
                "Isoleucylation",
                "Lactoylation",
                "Laurylation",
                "Leucylation",
                "Lipoylation",
                "L-lactate",
                "Lysylation",
                "Malonylation",
                "Methacrylation",
                "Methionylation",
                "Methoxylation",
                "Methylamination",
                "Methylation",
                "Methylsulfanylation",
                "Methylsulfation",
                "Myristoylation",
                "N-pyruvic acid 2-iminylation",
                "N-methylcarbamoylation",
                "Nitration",
                "Nitrosylation",
                "None",
                "Noradrenylation",
                "Norleucine",
                "Norvaline",
                "N-Glycosylation",
                "Octanoylation",
                "Oleoylation",
                "Ornithine",
                "Oxidation",
                "O-Glycosylation",
                "Palmitoleoylation",
                "Palmitoylation",
                "Pentadecanoylation",
                "Pentanoylation",
                "Phenylalanylation",
                "Phosphatidylethanolamine amidation",
                "Phosphoenolpyruvate",
                "Phosphorylation",
                "Prolylation",
                "Propionylation",
                "Pyridoxal phosphate",
                "Pyrrolidone carboxylic acid",
                "Pyruvic acid",
                "Retinoylation",
                "Selanylation",
                "Selenomethionine",
                "Serotonylation",
                "Serylation",
                "Stearoylation",
                "Stereoisomerisation",
                "Succinamide ring",
                "Succination",
                "Succinylation",
                "Sulfanylmethylation",
                "Sulfation",
                "Sulfhydration",
                "S-Glycosylation",
                "Tert-butylation",
                "Tert-butyloxycarbonylation",
                "Threoninylation",
                "Thyroxine",
                "Triiodothyronine",
                "Triphosphorylation",
                "Tryptophanylation",
                "Tyrosination",
                "UMPylation",
                "Valylation",
            ],
        },
        "category": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "ADP-ribose",
                "Amino acid",
                "Biotin",
                "Carbohydrate",
                "Chromophore/chromophore-like",
                "Covalent chemical modification",
                "Crosslinker",
                "Flavin",
                "Heme/heme-like",
                "Lipid/lipid-like",
                "Named protein modification",
                "Non-standard residue",
                "Nucleotide monophosphate",
                "Terminal acetylation",
                "Terminal amidation",
            ],
        },
        "position": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "Amino-acid side chain",
                "Amino-acid backbone",
                "Amino-acid side chain and backbone",
            ],
        },
        "polypeptide_position": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": ["C-terminal", "N-terminal", "Any position"],
        },
        "comp_id_linking_atom": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "modified_residue_id_linking_atom": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "uniprot_specific_ptm_accession": {
            "data_type": "uniprot_ptm_id",
            "regex": "PTM-[0-9]{4}",
            "options": [],
        },
        "uniprot_generic_ptm_accession": {
            "data_type": "uniprot_ptm_id",
            "regex": "PTM-[0-9]{4}",
            "options": [],
        },
        "first_instance_model_db_code": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "pdbx_modification_feature": {
        "ordinal": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "label_seq_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "modified_residue_label_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "modified_residue_label_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "modified_residue_label_seq_id": {
            "data_type": "int",
            "regex": "[+-]?[0-9]+",
            "options": [],
        },
        "modified_residue_label_alt_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "modified_residue_auth_comp_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "modified_residue_auth_asym_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "modified_residue_auth_seq_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "modified_residue_PDB_ins_code": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "modified_residue_symmetry": {
            "data_type": "symop",
            "regex": "([1-9]|[1-9][0-9]|1[0-8][0-9]|19[0-2])(_[1-9][1-9][1-9])?",
            "options": [],
        },
        "comp_id_linking_atom": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "modified_residue_id_linking_atom": {
            "data_type": "atcode",
            "regex": "[][ _(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "modified_residue_id": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "ref_pcm_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "ref_comp_id": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "12-Hydroxyfarnesylation",
                "12-Oxomyristoylation",
                "12R-Hydroxymyristoylation",
                "14-Hydroxy-10,13-dioxo-7-heptadecenoic acid",
                "(3-Aminopropyl)(5'-adenosyl)phosphono amidation",
                "2-Aminoadipylation",
                "2-Aminoethylphosphorylation",
                "2-Cholinephosphorylation",
                "2-Hydroxyisobutyrylation",
                "2-Oxo-5,5-dimethylhexanoylation",
                "2-Oxobutanoic acid",
                "2,3-Dicarboxypropylation",
                "3-Oxoalanine",
                "3-Phenyllactic acid",
                "(3R)-3-Hydroxybutyrylation",
                "4-Phosphopantetheine",
                "ADP-ribosylation",
                "ADP-riboxanation",
                "AMPylation",
                "Acetamidation",
                "Acetamidomethylation",
                "Acetylation",
                "Alanylation",
                "Allysine",
                "Amination",
                "Arachidoylation",
                "Archaeol",
                "Arginylation",
                "Arsenylation",
                "Asparaginylation",
                "Aspartylation",
                "Bacillithiolation",
                "Benzoylation",
                "Benzylation",
                "Beta-amino acid",
                "Beta-hydroxybutyrylation",
                "Beta-lysylation",
                "Beta-mercaptoethanol",
                "Biotinylation",
                "Bromination",
                "Butyrylation",
                "Carbamoylation",
                "Carboxyethylation",
                "Carboxylation",
                "Carboxymethylation",
                "cGMPylation",
                "Chlorination",
                "Cholesterylation",
                "Citrullination",
                "Crotonylation",
                "Cyanation",
                "Cysteinylation",
                "C-Mannosylation",
                "Deamidation",
                "Decanoylation",
                "Decarboxylation",
                "Dehydroamino acid",
                "Dehydrocoelenterazination",
                "Dehydrogenation",
                "Dehydroxylation",
                "Deoxidation",
                "Deoxyhypusine",
                "Diacylglycerol",
                "Dihydroxyacetonation",
                "Dimethylamination",
                "Diphosphorylation",
                "Diphthamide",
                "Dipyrromethane methylation",
                "Dopaminylation",
                "D-alanylation",
                "D-arginylation",
                "D-asparaginylation",
                "D-aspartylation",
                "D-cysteinylation",
                "D-glutaminylation",
                "D-glutamylation",
                "D-histidinylation",
                "D-isoleucylation",
                "D-lactate",
                "D-leucylation",
                "D-lysylation",
                "D-methionylation",
                "D-phenylalanylation",
                "D-prolylation",
                "D-serylation",
                "D-threoninylation",
                "D-tryptophanylation",
                "D-tyrosination",
                "D-valylation",
                "Ethylation",
                "Ethylsulfanylation",
                "Farnesylation",
                "Fluorination",
                "Formylation",
                "GMPylation",
                "Geranylgeranylation",
                "Glutaminylation",
                "Glutamylation",
                "Glutarylation",
                "Glutathionylation",
                "Glycerophosphorylation",
                "Glycerylphosphorylethanolamination",
                "Glycylation",
                "Heptanoylation",
                "Hexanoylation",
                "Histaminylation",
                "Histidinylation",
                "Hydrogenation",
                "Hydroperoxylation",
                "Hydroxyamination",
                "Hydroxyethylation",
                "Hydroxylation",
                "Hydroxymethylation",
                "Hydroxysulfanylation",
                "Hypusine",
                "Iodination",
                "Isoleucylation",
                "Lactoylation",
                "Laurylation",
                "Leucylation",
                "Lipoylation",
                "L-lactate",
                "Lysylation",
                "Malonylation",
                "Methacrylation",
                "Methionylation",
                "Methoxylation",
                "Methylamination",
                "Methylation",
                "Methylsulfanylation",
                "Methylsulfation",
                "Myristoylation",
                "N-pyruvic acid 2-iminylation",
                "N-methylcarbamoylation",
                "Nitration",
                "Nitrosylation",
                "None",
                "Noradrenylation",
                "Norleucine",
                "Norvaline",
                "N-Glycosylation",
                "Octanoylation",
                "Oleoylation",
                "Ornithine",
                "Oxidation",
                "O-Glycosylation",
                "Palmitoleoylation",
                "Palmitoylation",
                "Pentadecanoylation",
                "Pentanoylation",
                "Phenylalanylation",
                "Phosphatidylethanolamine amidation",
                "Phosphoenolpyruvate",
                "Phosphorylation",
                "Prolylation",
                "Propionylation",
                "Pyridoxal phosphate",
                "Pyrrolidone carboxylic acid",
                "Pyruvic acid",
                "Retinoylation",
                "Selanylation",
                "Selenomethionine",
                "Serotonylation",
                "Serylation",
                "Stearoylation",
                "Stereoisomerisation",
                "Succinamide ring",
                "Succination",
                "Succinylation",
                "Sulfanylmethylation",
                "Sulfation",
                "Sulfhydration",
                "S-Glycosylation",
                "Tert-butylation",
                "Tert-butyloxycarbonylation",
                "Threoninylation",
                "Thyroxine",
                "Triiodothyronine",
                "Triphosphorylation",
                "Tryptophanylation",
                "Tyrosination",
                "UMPylation",
                "Valylation",
            ],
        },
        "category": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "ADP-ribose",
                "Amino acid",
                "Biotin",
                "Carbohydrate",
                "Chromophore/chromophore-like",
                "Covalent chemical modification",
                "Crosslinker",
                "Disulfide bridge",
                "Flavin",
                "Heme/heme-like",
                "Isopeptide bond",
                "Lipid/lipid-like",
                "Named protein modification",
                "Non-standard linkage",
                "Non-standard residue",
                "Nucleotide monophosphate",
                "Terminal acetylation",
                "Terminal amidation",
            ],
        },
    },
    "pdbx_diffrn_batch": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "diffrn_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "cell_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "wavelength_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "space_group_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "detector_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "orientation_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_diffrn_cell": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "angle_alpha": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_alpha_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_beta": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_beta_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_gamma": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_gamma_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_a": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_a_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_b": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_b_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_c": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "length_c_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "pdbx_diffrn_orientation": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "matrix[1][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[1][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[1][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[2][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][1]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][2]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "matrix[3][3]": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "type": {
            "data_type": "line",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "U matrix",
                "UB matrix",
                "Real-space unit cell axis directions",
            ],
        },
    },
    "pdbx_diffrn_batch_scan": {
        "batch_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "scan_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "pdbx_diffrn_detector_panel_mapping": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "detector_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "array_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "array_section_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "diffrn_scan": {
        "date_end": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_end_estimated": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "date_start": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "integration_time": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "frame_id_start": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "frame_id_end": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "frames": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "time_period": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "time_rstrt_incr": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "diffrn_scan_axis": {
        "scan_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "axis_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "angle_start": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_range": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_increment": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_rstrt_incr": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "displacement_start": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "displacement_range": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "displacement_increment": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "displacement_rstrt_incr": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reference_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reference_displacement": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "diffrn_scan_collection": {
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "scan_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "type": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "translation_width": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "diffrn_scan_frame": {
        "date": {
            "data_type": "yyyy-mm-dd",
            "regex": "[0-9]?[0-9]?[0-9][0-9]-[0-9]?[0-9]-[0-9][0-9]",
            "options": [],
        },
        "frame_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "frame_number": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "integration_time": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "polarizn_Stokes_I": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "scan_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "time_period": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "time_rstrt_incr": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "diffrn_scan_frame_axis": {
        "axis_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_increment": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_rstrt_incr": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "displacement": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "displacement_increment": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "displacement_rstrt_incr": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "frame_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "reference_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reference_displacement": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "array_intensities": {
        "array_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "binary_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "gain": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "gain_esd": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "linearity": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "linear",
                "offset",
                "scaling",
                "scaling_offset",
                "sqrt_scaled",
                "logarithmic_scaled",
                "raw",
            ],
        },
        "offset": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "overload": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pixel_fast_bin_size": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pixel_slow_bin_size": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "pixel_binning_method": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["hardware", "software", "combined", "none", "unspecified"],
        },
        "scaling": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "undefined_value": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "underload": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "array_structure": {
        "byte_order": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["big_endian", "little_endian"],
        },
        "compression_type": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [
                "byte_offset",
                "canonical",
                "nibble_offset",
                "none",
                "packed",
                "packed_v2",
            ],
        },
        "compression_type_flag": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["uncorrelated_sections", "flat"],
        },
        "encoding_type": {
            "data_type": "uline",
            "regex": "[][ \\t_(),.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [
                "unsigned 1-bit integer",
                "unsigned 8-bit integer",
                "signed 8-bit integer",
                "unsigned 16-bit integer",
                "signed 16-bit integer",
                "unsigned 32-bit integer",
                "signed 32-bit integer",
                "signed 32-bit real IEEE",
                "signed 64-bit real IEEE",
                "signed 32-bit complex IEEE",
            ],
        },
    },
    "array_data": {
        "array_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "data": {
            "data_type": "binary",
            "regex": "\\n--CIF-BINARY-FORMAT-SECTION--\\n\\\n[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*\\\n\\n--CIF-BINARY-FORMAT-SECTION----",
            "options": [],
        },
        "external_data_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "header_contents": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
        "header_convention": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "array_structure_list": {
        "array_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "array_section_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "dimension": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "direction": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["increasing", "decreasing"],
        },
        "precedence": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "array_structure_list_axis": {
        "axis_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "axis_set_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angle_increment": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "displacement": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_displacement": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "displacement_increment": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "fract_displacement_increment": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "angular_pitch": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "radial_pitch": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reference_angle": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reference_displacement": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
    },
    "array_structure_list_section": {
        "array_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "end": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "index": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "start": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "stride": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
    },
    "diffrn_data_frame": {
        "array_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "array_section_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "binary_id": {"data_type": "int", "regex": "[+-]?[0-9]+", "options": []},
        "center_fast": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "center_slow": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "center_derived": {
            "data_type": "ucode",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "center_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["mm", "pixels", "bins"],
        },
        "detector_element_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "details": {
            "data_type": "text",
            "regex": "[][ \\n\\t()_,.;:\"&<>/\\{}'`~!@#$%?+=*A-Za-z0-9|^-]*",
            "options": [],
        },
    },
    "diffrn_detector_axis": {
        "axis_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "detector_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
    },
    "diffrn_detector_element": {
        "id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "detector_id": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": [],
        },
        "reference_center_fast": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reference_center_slow": {
            "data_type": "float",
            "regex": "-?(([0-9]+)[.]?|([0-9]*[.][0-9]+))([(][0-9]+[)])?([eE][+-]?[0-9]+)?",
            "options": [],
        },
        "reference_center_units": {
            "data_type": "code",
            "regex": "[][_,.;:\"&<>()/\\{}'`~!@#$%A-Za-z0-9*|+-]*",
            "options": ["mm", "pixels", "bins"],
        },
    },
}
